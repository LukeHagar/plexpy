"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import date
import httpx
from plex_api_client.types import BaseModel
from plex_api_client.utils import FieldMetadata, PathParamMetadata
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetMetaDataByRatingKeyRequestTypedDict(TypedDict):
    rating_key: int
    r"""the id of the library item to return the children of."""


class GetMetaDataByRatingKeyRequest(BaseModel):
    rating_key: Annotated[
        int,
        pydantic.Field(alias="ratingKey"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""the id of the library item to return the children of."""


class GetMetaDataByRatingKeyStreamTypedDict(TypedDict):
    id: NotRequired[int]
    stream_type: NotRequired[int]
    default: NotRequired[bool]
    codec: NotRequired[str]
    index: NotRequired[int]
    bitrate: NotRequired[int]
    bit_depth: NotRequired[int]
    chroma_location: NotRequired[str]
    chroma_subsampling: NotRequired[str]
    coded_height: NotRequired[int]
    coded_width: NotRequired[int]
    color_primaries: NotRequired[str]
    color_range: NotRequired[str]
    color_space: NotRequired[str]
    color_trc: NotRequired[str]
    frame_rate: NotRequired[int]
    has_scaling_matrix: NotRequired[bool]
    height: NotRequired[int]
    level: NotRequired[int]
    profile: NotRequired[str]
    ref_frames: NotRequired[int]
    scan_type: NotRequired[str]
    stream_identifier: NotRequired[str]
    width: NotRequired[int]
    display_title: NotRequired[str]
    extended_display_title: NotRequired[str]
    selected: NotRequired[bool]
    channels: NotRequired[int]
    language: NotRequired[str]
    language_tag: NotRequired[str]
    language_code: NotRequired[str]
    sampling_rate: NotRequired[int]


class GetMetaDataByRatingKeyStream(BaseModel):
    id: Optional[int] = None

    stream_type: Annotated[Optional[int], pydantic.Field(alias="streamType")] = None

    default: Optional[bool] = None

    codec: Optional[str] = None

    index: Optional[int] = None

    bitrate: Optional[int] = None

    bit_depth: Annotated[Optional[int], pydantic.Field(alias="bitDepth")] = None

    chroma_location: Annotated[
        Optional[str], pydantic.Field(alias="chromaLocation")
    ] = None

    chroma_subsampling: Annotated[
        Optional[str], pydantic.Field(alias="chromaSubsampling")
    ] = None

    coded_height: Annotated[Optional[int], pydantic.Field(alias="codedHeight")] = None

    coded_width: Annotated[Optional[int], pydantic.Field(alias="codedWidth")] = None

    color_primaries: Annotated[
        Optional[str], pydantic.Field(alias="colorPrimaries")
    ] = None

    color_range: Annotated[Optional[str], pydantic.Field(alias="colorRange")] = None

    color_space: Annotated[Optional[str], pydantic.Field(alias="colorSpace")] = None

    color_trc: Annotated[Optional[str], pydantic.Field(alias="colorTrc")] = None

    frame_rate: Annotated[Optional[int], pydantic.Field(alias="frameRate")] = None

    has_scaling_matrix: Annotated[
        Optional[bool], pydantic.Field(alias="hasScalingMatrix")
    ] = None

    height: Optional[int] = None

    level: Optional[int] = None

    profile: Optional[str] = None

    ref_frames: Annotated[Optional[int], pydantic.Field(alias="refFrames")] = None

    scan_type: Annotated[Optional[str], pydantic.Field(alias="scanType")] = None

    stream_identifier: Annotated[
        Optional[str], pydantic.Field(alias="streamIdentifier")
    ] = None

    width: Optional[int] = None

    display_title: Annotated[Optional[str], pydantic.Field(alias="displayTitle")] = None

    extended_display_title: Annotated[
        Optional[str], pydantic.Field(alias="extendedDisplayTitle")
    ] = None

    selected: Optional[bool] = None

    channels: Optional[int] = None

    language: Optional[str] = None

    language_tag: Annotated[Optional[str], pydantic.Field(alias="languageTag")] = None

    language_code: Annotated[Optional[str], pydantic.Field(alias="languageCode")] = None

    sampling_rate: Annotated[Optional[int], pydantic.Field(alias="samplingRate")] = None


class GetMetaDataByRatingKeyPartTypedDict(TypedDict):
    id: NotRequired[int]
    key: NotRequired[str]
    duration: NotRequired[int]
    file: NotRequired[str]
    size: NotRequired[int]
    audio_profile: NotRequired[str]
    container: NotRequired[str]
    has64bit_offsets: NotRequired[bool]
    optimized_for_streaming: NotRequired[bool]
    video_profile: NotRequired[str]
    stream: NotRequired[List[GetMetaDataByRatingKeyStreamTypedDict]]


class GetMetaDataByRatingKeyPart(BaseModel):
    id: Optional[int] = None

    key: Optional[str] = None

    duration: Optional[int] = None

    file: Optional[str] = None

    size: Optional[int] = None

    audio_profile: Annotated[Optional[str], pydantic.Field(alias="audioProfile")] = None

    container: Optional[str] = None

    has64bit_offsets: Annotated[
        Optional[bool], pydantic.Field(alias="has64bitOffsets")
    ] = None

    optimized_for_streaming: Annotated[
        Optional[bool], pydantic.Field(alias="optimizedForStreaming")
    ] = None

    video_profile: Annotated[Optional[str], pydantic.Field(alias="videoProfile")] = None

    stream: Annotated[
        Optional[List[GetMetaDataByRatingKeyStream]], pydantic.Field(alias="Stream")
    ] = None


class GetMetaDataByRatingKeyMediaTypedDict(TypedDict):
    id: NotRequired[int]
    duration: NotRequired[int]
    bitrate: NotRequired[int]
    width: NotRequired[int]
    height: NotRequired[int]
    aspect_ratio: NotRequired[float]
    audio_channels: NotRequired[int]
    audio_codec: NotRequired[str]
    video_codec: NotRequired[str]
    video_resolution: NotRequired[str]
    container: NotRequired[str]
    video_frame_rate: NotRequired[str]
    optimized_for_streaming: NotRequired[int]
    audio_profile: NotRequired[str]
    has64bit_offsets: NotRequired[bool]
    video_profile: NotRequired[str]
    part: NotRequired[List[GetMetaDataByRatingKeyPartTypedDict]]


class GetMetaDataByRatingKeyMedia(BaseModel):
    id: Optional[int] = None

    duration: Optional[int] = None

    bitrate: Optional[int] = None

    width: Optional[int] = None

    height: Optional[int] = None

    aspect_ratio: Annotated[Optional[float], pydantic.Field(alias="aspectRatio")] = None

    audio_channels: Annotated[Optional[int], pydantic.Field(alias="audioChannels")] = (
        None
    )

    audio_codec: Annotated[Optional[str], pydantic.Field(alias="audioCodec")] = None

    video_codec: Annotated[Optional[str], pydantic.Field(alias="videoCodec")] = None

    video_resolution: Annotated[
        Optional[str], pydantic.Field(alias="videoResolution")
    ] = None

    container: Optional[str] = None

    video_frame_rate: Annotated[
        Optional[str], pydantic.Field(alias="videoFrameRate")
    ] = None

    optimized_for_streaming: Annotated[
        Optional[int], pydantic.Field(alias="optimizedForStreaming")
    ] = None

    audio_profile: Annotated[Optional[str], pydantic.Field(alias="audioProfile")] = None

    has64bit_offsets: Annotated[
        Optional[bool], pydantic.Field(alias="has64bitOffsets")
    ] = None

    video_profile: Annotated[Optional[str], pydantic.Field(alias="videoProfile")] = None

    part: Annotated[
        Optional[List[GetMetaDataByRatingKeyPart]], pydantic.Field(alias="Part")
    ] = None


class GetMetaDataByRatingKeyGenreTypedDict(TypedDict):
    id: NotRequired[int]
    filter_: NotRequired[str]
    tag: NotRequired[str]


class GetMetaDataByRatingKeyGenre(BaseModel):
    id: Optional[int] = None

    filter_: Annotated[Optional[str], pydantic.Field(alias="filter")] = None

    tag: Optional[str] = None


class GetMetaDataByRatingKeyCountryTypedDict(TypedDict):
    id: NotRequired[int]
    filter_: NotRequired[str]
    tag: NotRequired[str]


class GetMetaDataByRatingKeyCountry(BaseModel):
    id: Optional[int] = None

    filter_: Annotated[Optional[str], pydantic.Field(alias="filter")] = None

    tag: Optional[str] = None


class GuidsTypedDict(TypedDict):
    id: NotRequired[str]


class Guids(BaseModel):
    id: Optional[str] = None


class RatingsTypedDict(TypedDict):
    image: NotRequired[str]
    value: NotRequired[float]
    type: NotRequired[str]


class Ratings(BaseModel):
    image: Optional[str] = None

    value: Optional[float] = None

    type: Optional[str] = None


class GetMetaDataByRatingKeyDirectorTypedDict(TypedDict):
    id: NotRequired[int]
    filter_: NotRequired[str]
    tag: NotRequired[str]
    tag_key: NotRequired[str]
    thumb: NotRequired[str]


class GetMetaDataByRatingKeyDirector(BaseModel):
    id: Optional[int] = None

    filter_: Annotated[Optional[str], pydantic.Field(alias="filter")] = None

    tag: Optional[str] = None

    tag_key: Annotated[Optional[str], pydantic.Field(alias="tagKey")] = None

    thumb: Optional[str] = None


class GetMetaDataByRatingKeyWriterTypedDict(TypedDict):
    id: NotRequired[int]
    filter_: NotRequired[str]
    tag: NotRequired[str]
    tag_key: NotRequired[str]
    thumb: NotRequired[str]


class GetMetaDataByRatingKeyWriter(BaseModel):
    id: Optional[int] = None

    filter_: Annotated[Optional[str], pydantic.Field(alias="filter")] = None

    tag: Optional[str] = None

    tag_key: Annotated[Optional[str], pydantic.Field(alias="tagKey")] = None

    thumb: Optional[str] = None


class GetMetaDataByRatingKeyRoleTypedDict(TypedDict):
    id: NotRequired[int]
    filter_: NotRequired[str]
    tag: NotRequired[str]
    tag_key: NotRequired[str]
    role: NotRequired[str]
    thumb: NotRequired[str]


class GetMetaDataByRatingKeyRole(BaseModel):
    id: Optional[int] = None

    filter_: Annotated[Optional[str], pydantic.Field(alias="filter")] = None

    tag: Optional[str] = None

    tag_key: Annotated[Optional[str], pydantic.Field(alias="tagKey")] = None

    role: Optional[str] = None

    thumb: Optional[str] = None


class ProducerTypedDict(TypedDict):
    id: NotRequired[int]
    filter_: NotRequired[str]
    tag: NotRequired[str]
    tag_key: NotRequired[str]
    thumb: NotRequired[str]


class Producer(BaseModel):
    id: Optional[int] = None

    filter_: Annotated[Optional[str], pydantic.Field(alias="filter")] = None

    tag: Optional[str] = None

    tag_key: Annotated[Optional[str], pydantic.Field(alias="tagKey")] = None

    thumb: Optional[str] = None


class GetMetaDataByRatingKeyMetadataTypedDict(TypedDict):
    rating_key: NotRequired[str]
    key: NotRequired[str]
    guid: NotRequired[str]
    studio: NotRequired[str]
    type: NotRequired[str]
    title: NotRequired[str]
    library_section_title: NotRequired[str]
    library_section_id: NotRequired[int]
    library_section_key: NotRequired[str]
    content_rating: NotRequired[str]
    summary: NotRequired[str]
    rating: NotRequired[float]
    audience_rating: NotRequired[float]
    year: NotRequired[int]
    tagline: NotRequired[str]
    thumb: NotRequired[str]
    art: NotRequired[str]
    duration: NotRequired[int]
    originally_available_at: NotRequired[date]
    added_at: NotRequired[int]
    updated_at: NotRequired[int]
    audience_rating_image: NotRequired[str]
    has_premium_primary_extra: NotRequired[str]
    rating_image: NotRequired[str]
    media: NotRequired[List[GetMetaDataByRatingKeyMediaTypedDict]]
    genre: NotRequired[List[GetMetaDataByRatingKeyGenreTypedDict]]
    country: NotRequired[List[GetMetaDataByRatingKeyCountryTypedDict]]
    guids: NotRequired[List[GuidsTypedDict]]
    ratings: NotRequired[List[RatingsTypedDict]]
    director: NotRequired[List[GetMetaDataByRatingKeyDirectorTypedDict]]
    writer: NotRequired[List[GetMetaDataByRatingKeyWriterTypedDict]]
    role: NotRequired[List[GetMetaDataByRatingKeyRoleTypedDict]]
    producer: NotRequired[List[ProducerTypedDict]]


class GetMetaDataByRatingKeyMetadata(BaseModel):
    rating_key: Annotated[Optional[str], pydantic.Field(alias="ratingKey")] = None

    key: Optional[str] = None

    guid: Optional[str] = None

    studio: Optional[str] = None

    type: Optional[str] = None

    title: Optional[str] = None

    library_section_title: Annotated[
        Optional[str], pydantic.Field(alias="librarySectionTitle")
    ] = None

    library_section_id: Annotated[
        Optional[int], pydantic.Field(alias="librarySectionID")
    ] = None

    library_section_key: Annotated[
        Optional[str], pydantic.Field(alias="librarySectionKey")
    ] = None

    content_rating: Annotated[Optional[str], pydantic.Field(alias="contentRating")] = (
        None
    )

    summary: Optional[str] = None

    rating: Optional[float] = None

    audience_rating: Annotated[
        Optional[float], pydantic.Field(alias="audienceRating")
    ] = None

    year: Optional[int] = None

    tagline: Optional[str] = None

    thumb: Optional[str] = None

    art: Optional[str] = None

    duration: Optional[int] = None

    originally_available_at: Annotated[
        Optional[date], pydantic.Field(alias="originallyAvailableAt")
    ] = None

    added_at: Annotated[Optional[int], pydantic.Field(alias="addedAt")] = None

    updated_at: Annotated[Optional[int], pydantic.Field(alias="updatedAt")] = None

    audience_rating_image: Annotated[
        Optional[str], pydantic.Field(alias="audienceRatingImage")
    ] = None

    has_premium_primary_extra: Annotated[
        Optional[str], pydantic.Field(alias="hasPremiumPrimaryExtra")
    ] = None

    rating_image: Annotated[Optional[str], pydantic.Field(alias="ratingImage")] = None

    media: Annotated[
        Optional[List[GetMetaDataByRatingKeyMedia]], pydantic.Field(alias="Media")
    ] = None

    genre: Annotated[
        Optional[List[GetMetaDataByRatingKeyGenre]], pydantic.Field(alias="Genre")
    ] = None

    country: Annotated[
        Optional[List[GetMetaDataByRatingKeyCountry]], pydantic.Field(alias="Country")
    ] = None

    guids: Annotated[Optional[List[Guids]], pydantic.Field(alias="Guid")] = None

    ratings: Annotated[Optional[List[Ratings]], pydantic.Field(alias="Rating")] = None

    director: Annotated[
        Optional[List[GetMetaDataByRatingKeyDirector]], pydantic.Field(alias="Director")
    ] = None

    writer: Annotated[
        Optional[List[GetMetaDataByRatingKeyWriter]], pydantic.Field(alias="Writer")
    ] = None

    role: Annotated[
        Optional[List[GetMetaDataByRatingKeyRole]], pydantic.Field(alias="Role")
    ] = None

    producer: Annotated[Optional[List[Producer]], pydantic.Field(alias="Producer")] = (
        None
    )


class GetMetaDataByRatingKeyMediaContainerTypedDict(TypedDict):
    size: NotRequired[int]
    allow_sync: NotRequired[bool]
    identifier: NotRequired[str]
    library_section_id: NotRequired[int]
    library_section_title: NotRequired[str]
    library_section_uuid: NotRequired[str]
    media_tag_prefix: NotRequired[str]
    media_tag_version: NotRequired[int]
    metadata: NotRequired[List[GetMetaDataByRatingKeyMetadataTypedDict]]


class GetMetaDataByRatingKeyMediaContainer(BaseModel):
    size: Optional[int] = None

    allow_sync: Annotated[Optional[bool], pydantic.Field(alias="allowSync")] = None

    identifier: Optional[str] = None

    library_section_id: Annotated[
        Optional[int], pydantic.Field(alias="librarySectionID")
    ] = None

    library_section_title: Annotated[
        Optional[str], pydantic.Field(alias="librarySectionTitle")
    ] = None

    library_section_uuid: Annotated[
        Optional[str], pydantic.Field(alias="librarySectionUUID")
    ] = None

    media_tag_prefix: Annotated[
        Optional[str], pydantic.Field(alias="mediaTagPrefix")
    ] = None

    media_tag_version: Annotated[
        Optional[int], pydantic.Field(alias="mediaTagVersion")
    ] = None

    metadata: Annotated[
        Optional[List[GetMetaDataByRatingKeyMetadata]], pydantic.Field(alias="Metadata")
    ] = None


class GetMetaDataByRatingKeyResponseBodyTypedDict(TypedDict):
    r"""The metadata of the library item."""

    media_container: NotRequired[GetMetaDataByRatingKeyMediaContainerTypedDict]


class GetMetaDataByRatingKeyResponseBody(BaseModel):
    r"""The metadata of the library item."""

    media_container: Annotated[
        Optional[GetMetaDataByRatingKeyMediaContainer],
        pydantic.Field(alias="MediaContainer"),
    ] = None


class GetMetaDataByRatingKeyResponseTypedDict(TypedDict):
    content_type: str
    r"""HTTP response content type for this operation"""
    status_code: int
    r"""HTTP response status code for this operation"""
    raw_response: httpx.Response
    r"""Raw HTTP response; suitable for custom response parsing"""
    object: NotRequired[GetMetaDataByRatingKeyResponseBodyTypedDict]
    r"""The metadata of the library item."""


class GetMetaDataByRatingKeyResponse(BaseModel):
    content_type: str
    r"""HTTP response content type for this operation"""

    status_code: int
    r"""HTTP response status code for this operation"""

    raw_response: httpx.Response
    r"""Raw HTTP response; suitable for custom response parsing"""

    object: Optional[GetMetaDataByRatingKeyResponseBody] = None
    r"""The metadata of the library item."""
