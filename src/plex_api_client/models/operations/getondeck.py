"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
import httpx
from plex_api_client.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetOnDeckStreamTypedDict(TypedDict):
    id: NotRequired[float]
    stream_type: NotRequired[float]
    default: NotRequired[bool]
    codec: NotRequired[str]
    index: NotRequired[float]
    bitrate: NotRequired[float]
    language: NotRequired[str]
    language_tag: NotRequired[str]
    language_code: NotRequired[str]
    bit_depth: NotRequired[float]
    chroma_location: NotRequired[str]
    chroma_subsampling: NotRequired[str]
    coded_height: NotRequired[float]
    coded_width: NotRequired[float]
    color_range: NotRequired[str]
    frame_rate: NotRequired[float]
    height: NotRequired[float]
    level: NotRequired[float]
    profile: NotRequired[str]
    ref_frames: NotRequired[float]
    width: NotRequired[float]
    display_title: NotRequired[str]
    extended_display_title: NotRequired[str]


class GetOnDeckStream(BaseModel):
    id: Optional[float] = None

    stream_type: Annotated[Optional[float], pydantic.Field(alias="streamType")] = None

    default: Optional[bool] = None

    codec: Optional[str] = None

    index: Optional[float] = None

    bitrate: Optional[float] = None

    language: Optional[str] = None

    language_tag: Annotated[Optional[str], pydantic.Field(alias="languageTag")] = None

    language_code: Annotated[Optional[str], pydantic.Field(alias="languageCode")] = None

    bit_depth: Annotated[Optional[float], pydantic.Field(alias="bitDepth")] = None

    chroma_location: Annotated[
        Optional[str], pydantic.Field(alias="chromaLocation")
    ] = None

    chroma_subsampling: Annotated[
        Optional[str], pydantic.Field(alias="chromaSubsampling")
    ] = None

    coded_height: Annotated[Optional[float], pydantic.Field(alias="codedHeight")] = None

    coded_width: Annotated[Optional[float], pydantic.Field(alias="codedWidth")] = None

    color_range: Annotated[Optional[str], pydantic.Field(alias="colorRange")] = None

    frame_rate: Annotated[Optional[float], pydantic.Field(alias="frameRate")] = None

    height: Optional[float] = None

    level: Optional[float] = None

    profile: Optional[str] = None

    ref_frames: Annotated[Optional[float], pydantic.Field(alias="refFrames")] = None

    width: Optional[float] = None

    display_title: Annotated[Optional[str], pydantic.Field(alias="displayTitle")] = None

    extended_display_title: Annotated[
        Optional[str], pydantic.Field(alias="extendedDisplayTitle")
    ] = None


class GetOnDeckPartTypedDict(TypedDict):
    id: NotRequired[float]
    key: NotRequired[str]
    duration: NotRequired[float]
    file: NotRequired[str]
    size: NotRequired[float]
    audio_profile: NotRequired[str]
    container: NotRequired[str]
    video_profile: NotRequired[str]
    stream: NotRequired[List[GetOnDeckStreamTypedDict]]


class GetOnDeckPart(BaseModel):
    id: Optional[float] = None

    key: Optional[str] = None

    duration: Optional[float] = None

    file: Optional[str] = None

    size: Optional[float] = None

    audio_profile: Annotated[Optional[str], pydantic.Field(alias="audioProfile")] = None

    container: Optional[str] = None

    video_profile: Annotated[Optional[str], pydantic.Field(alias="videoProfile")] = None

    stream: Annotated[
        Optional[List[GetOnDeckStream]], pydantic.Field(alias="Stream")
    ] = None


class GetOnDeckMediaTypedDict(TypedDict):
    id: NotRequired[float]
    duration: NotRequired[float]
    bitrate: NotRequired[float]
    width: NotRequired[float]
    height: NotRequired[float]
    aspect_ratio: NotRequired[float]
    audio_channels: NotRequired[float]
    audio_codec: NotRequired[str]
    video_codec: NotRequired[str]
    video_resolution: NotRequired[str]
    container: NotRequired[str]
    video_frame_rate: NotRequired[str]
    audio_profile: NotRequired[str]
    video_profile: NotRequired[str]
    part: NotRequired[List[GetOnDeckPartTypedDict]]


class GetOnDeckMedia(BaseModel):
    id: Optional[float] = None

    duration: Optional[float] = None

    bitrate: Optional[float] = None

    width: Optional[float] = None

    height: Optional[float] = None

    aspect_ratio: Annotated[Optional[float], pydantic.Field(alias="aspectRatio")] = None

    audio_channels: Annotated[
        Optional[float], pydantic.Field(alias="audioChannels")
    ] = None

    audio_codec: Annotated[Optional[str], pydantic.Field(alias="audioCodec")] = None

    video_codec: Annotated[Optional[str], pydantic.Field(alias="videoCodec")] = None

    video_resolution: Annotated[
        Optional[str], pydantic.Field(alias="videoResolution")
    ] = None

    container: Optional[str] = None

    video_frame_rate: Annotated[
        Optional[str], pydantic.Field(alias="videoFrameRate")
    ] = None

    audio_profile: Annotated[Optional[str], pydantic.Field(alias="audioProfile")] = None

    video_profile: Annotated[Optional[str], pydantic.Field(alias="videoProfile")] = None

    part: Annotated[Optional[List[GetOnDeckPart]], pydantic.Field(alias="Part")] = None


class GetOnDeckGuidsTypedDict(TypedDict):
    id: NotRequired[str]


class GetOnDeckGuids(BaseModel):
    id: Optional[str] = None


class GetOnDeckMetadataTypedDict(TypedDict):
    allow_sync: NotRequired[bool]
    library_section_id: NotRequired[float]
    library_section_title: NotRequired[str]
    library_section_uuid: NotRequired[str]
    rating_key: NotRequired[float]
    key: NotRequired[str]
    parent_rating_key: NotRequired[float]
    grandparent_rating_key: NotRequired[float]
    guid: NotRequired[str]
    parent_guid: NotRequired[str]
    grandparent_guid: NotRequired[str]
    type: NotRequired[str]
    title: NotRequired[str]
    grandparent_key: NotRequired[str]
    parent_key: NotRequired[str]
    library_section_key: NotRequired[str]
    grandparent_title: NotRequired[str]
    parent_title: NotRequired[str]
    content_rating: NotRequired[str]
    summary: NotRequired[str]
    index: NotRequired[float]
    parent_index: NotRequired[float]
    last_viewed_at: NotRequired[float]
    year: NotRequired[float]
    thumb: NotRequired[str]
    art: NotRequired[str]
    parent_thumb: NotRequired[str]
    grandparent_thumb: NotRequired[str]
    grandparent_art: NotRequired[str]
    grandparent_theme: NotRequired[str]
    duration: NotRequired[float]
    originally_available_at: NotRequired[datetime]
    added_at: NotRequired[float]
    updated_at: NotRequired[float]
    media: NotRequired[List[GetOnDeckMediaTypedDict]]
    guids: NotRequired[List[GetOnDeckGuidsTypedDict]]


class GetOnDeckMetadata(BaseModel):
    allow_sync: Annotated[Optional[bool], pydantic.Field(alias="allowSync")] = None

    library_section_id: Annotated[
        Optional[float], pydantic.Field(alias="librarySectionID")
    ] = None

    library_section_title: Annotated[
        Optional[str], pydantic.Field(alias="librarySectionTitle")
    ] = None

    library_section_uuid: Annotated[
        Optional[str], pydantic.Field(alias="librarySectionUUID")
    ] = None

    rating_key: Annotated[Optional[float], pydantic.Field(alias="ratingKey")] = None

    key: Optional[str] = None

    parent_rating_key: Annotated[
        Optional[float], pydantic.Field(alias="parentRatingKey")
    ] = None

    grandparent_rating_key: Annotated[
        Optional[float], pydantic.Field(alias="grandparentRatingKey")
    ] = None

    guid: Optional[str] = None

    parent_guid: Annotated[Optional[str], pydantic.Field(alias="parentGuid")] = None

    grandparent_guid: Annotated[
        Optional[str], pydantic.Field(alias="grandparentGuid")
    ] = None

    type: Optional[str] = None

    title: Optional[str] = None

    grandparent_key: Annotated[
        Optional[str], pydantic.Field(alias="grandparentKey")
    ] = None

    parent_key: Annotated[Optional[str], pydantic.Field(alias="parentKey")] = None

    library_section_key: Annotated[
        Optional[str], pydantic.Field(alias="librarySectionKey")
    ] = None

    grandparent_title: Annotated[
        Optional[str], pydantic.Field(alias="grandparentTitle")
    ] = None

    parent_title: Annotated[Optional[str], pydantic.Field(alias="parentTitle")] = None

    content_rating: Annotated[Optional[str], pydantic.Field(alias="contentRating")] = (
        None
    )

    summary: Optional[str] = None

    index: Optional[float] = None

    parent_index: Annotated[Optional[float], pydantic.Field(alias="parentIndex")] = None

    last_viewed_at: Annotated[Optional[float], pydantic.Field(alias="lastViewedAt")] = (
        None
    )

    year: Optional[float] = None

    thumb: Optional[str] = None

    art: Optional[str] = None

    parent_thumb: Annotated[Optional[str], pydantic.Field(alias="parentThumb")] = None

    grandparent_thumb: Annotated[
        Optional[str], pydantic.Field(alias="grandparentThumb")
    ] = None

    grandparent_art: Annotated[
        Optional[str], pydantic.Field(alias="grandparentArt")
    ] = None

    grandparent_theme: Annotated[
        Optional[str], pydantic.Field(alias="grandparentTheme")
    ] = None

    duration: Optional[float] = None

    originally_available_at: Annotated[
        Optional[datetime], pydantic.Field(alias="originallyAvailableAt")
    ] = None

    added_at: Annotated[Optional[float], pydantic.Field(alias="addedAt")] = None

    updated_at: Annotated[Optional[float], pydantic.Field(alias="updatedAt")] = None

    media: Annotated[Optional[List[GetOnDeckMedia]], pydantic.Field(alias="Media")] = (
        None
    )

    guids: Annotated[Optional[List[GetOnDeckGuids]], pydantic.Field(alias="Guid")] = (
        None
    )


class GetOnDeckMediaContainerTypedDict(TypedDict):
    size: NotRequired[float]
    allow_sync: NotRequired[bool]
    identifier: NotRequired[str]
    media_tag_prefix: NotRequired[str]
    media_tag_version: NotRequired[float]
    mixed_parents: NotRequired[bool]
    metadata: NotRequired[List[GetOnDeckMetadataTypedDict]]


class GetOnDeckMediaContainer(BaseModel):
    size: Optional[float] = None

    allow_sync: Annotated[Optional[bool], pydantic.Field(alias="allowSync")] = None

    identifier: Optional[str] = None

    media_tag_prefix: Annotated[
        Optional[str], pydantic.Field(alias="mediaTagPrefix")
    ] = None

    media_tag_version: Annotated[
        Optional[float], pydantic.Field(alias="mediaTagVersion")
    ] = None

    mixed_parents: Annotated[Optional[bool], pydantic.Field(alias="mixedParents")] = (
        None
    )

    metadata: Annotated[
        Optional[List[GetOnDeckMetadata]], pydantic.Field(alias="Metadata")
    ] = None


class GetOnDeckResponseBodyTypedDict(TypedDict):
    r"""The on Deck content"""

    media_container: NotRequired[GetOnDeckMediaContainerTypedDict]


class GetOnDeckResponseBody(BaseModel):
    r"""The on Deck content"""

    media_container: Annotated[
        Optional[GetOnDeckMediaContainer], pydantic.Field(alias="MediaContainer")
    ] = None


class GetOnDeckResponseTypedDict(TypedDict):
    content_type: str
    r"""HTTP response content type for this operation"""
    status_code: int
    r"""HTTP response status code for this operation"""
    raw_response: httpx.Response
    r"""Raw HTTP response; suitable for custom response parsing"""
    object: NotRequired[GetOnDeckResponseBodyTypedDict]
    r"""The on Deck content"""


class GetOnDeckResponse(BaseModel):
    content_type: str
    r"""HTTP response content type for this operation"""

    status_code: int
    r"""HTTP response status code for this operation"""

    raw_response: httpx.Response
    r"""Raw HTTP response; suitable for custom response parsing"""

    object: Optional[GetOnDeckResponseBody] = None
    r"""The on Deck content"""
