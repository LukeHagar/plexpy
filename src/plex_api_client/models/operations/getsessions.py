"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import httpx
from plex_api_client.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetSessionsStreamTypedDict(TypedDict):
    album_gain: NotRequired[str]
    album_peak: NotRequired[str]
    album_range: NotRequired[str]
    audio_channel_layout: NotRequired[str]
    bit_depth: NotRequired[int]
    bitrate: NotRequired[int]
    channels: NotRequired[int]
    codec: NotRequired[str]
    display_title: NotRequired[str]
    extended_display_title: NotRequired[str]
    gain: NotRequired[str]
    id: NotRequired[str]
    index: NotRequired[int]
    loudness: NotRequired[str]
    lra: NotRequired[str]
    peak: NotRequired[str]
    sampling_rate: NotRequired[int]
    selected: NotRequired[bool]
    stream_type: NotRequired[int]
    location: NotRequired[str]


class GetSessionsStream(BaseModel):
    album_gain: Annotated[Optional[str], pydantic.Field(alias="albumGain")] = None

    album_peak: Annotated[Optional[str], pydantic.Field(alias="albumPeak")] = None

    album_range: Annotated[Optional[str], pydantic.Field(alias="albumRange")] = None

    audio_channel_layout: Annotated[
        Optional[str], pydantic.Field(alias="audioChannelLayout")
    ] = None

    bit_depth: Annotated[Optional[int], pydantic.Field(alias="bitDepth")] = None

    bitrate: Optional[int] = None

    channels: Optional[int] = None

    codec: Optional[str] = None

    display_title: Annotated[Optional[str], pydantic.Field(alias="displayTitle")] = None

    extended_display_title: Annotated[
        Optional[str], pydantic.Field(alias="extendedDisplayTitle")
    ] = None

    gain: Optional[str] = None

    id: Optional[str] = None

    index: Optional[int] = None

    loudness: Optional[str] = None

    lra: Optional[str] = None

    peak: Optional[str] = None

    sampling_rate: Annotated[Optional[int], pydantic.Field(alias="samplingRate")] = None

    selected: Optional[bool] = None

    stream_type: Annotated[Optional[int], pydantic.Field(alias="streamType")] = None

    location: Optional[str] = None


class GetSessionsPartTypedDict(TypedDict):
    container: NotRequired[str]
    duration: NotRequired[int]
    file: NotRequired[str]
    has_thumbnail: NotRequired[str]
    id: NotRequired[str]
    key: NotRequired[str]
    size: NotRequired[int]
    decision: NotRequired[str]
    selected: NotRequired[bool]
    stream: NotRequired[List[GetSessionsStreamTypedDict]]


class GetSessionsPart(BaseModel):
    container: Optional[str] = None

    duration: Optional[int] = None

    file: Optional[str] = None

    has_thumbnail: Annotated[Optional[str], pydantic.Field(alias="hasThumbnail")] = None

    id: Optional[str] = None

    key: Optional[str] = None

    size: Optional[int] = None

    decision: Optional[str] = None

    selected: Optional[bool] = None

    stream: Annotated[
        Optional[List[GetSessionsStream]], pydantic.Field(alias="Stream")
    ] = None


class GetSessionsMediaTypedDict(TypedDict):
    audio_channels: NotRequired[int]
    audio_codec: NotRequired[str]
    bitrate: NotRequired[int]
    container: NotRequired[str]
    duration: NotRequired[int]
    id: NotRequired[str]
    selected: NotRequired[bool]
    part: NotRequired[List[GetSessionsPartTypedDict]]


class GetSessionsMedia(BaseModel):
    audio_channels: Annotated[Optional[int], pydantic.Field(alias="audioChannels")] = (
        None
    )

    audio_codec: Annotated[Optional[str], pydantic.Field(alias="audioCodec")] = None

    bitrate: Optional[int] = None

    container: Optional[str] = None

    duration: Optional[int] = None

    id: Optional[str] = None

    selected: Optional[bool] = None

    part: Annotated[Optional[List[GetSessionsPart]], pydantic.Field(alias="Part")] = (
        None
    )


class GetSessionsUserTypedDict(TypedDict):
    id: NotRequired[str]
    thumb: NotRequired[str]
    title: NotRequired[str]


class GetSessionsUser(BaseModel):
    id: Optional[str] = None

    thumb: Optional[str] = None

    title: Optional[str] = None


class PlayerTypedDict(TypedDict):
    address: NotRequired[str]
    machine_identifier: NotRequired[str]
    model: NotRequired[str]
    platform: NotRequired[str]
    platform_version: NotRequired[str]
    product: NotRequired[str]
    profile: NotRequired[str]
    remote_public_address: NotRequired[str]
    state: NotRequired[str]
    title: NotRequired[str]
    version: NotRequired[str]
    local: NotRequired[bool]
    relayed: NotRequired[bool]
    secure: NotRequired[bool]
    user_id: NotRequired[int]


class Player(BaseModel):
    address: Optional[str] = None

    machine_identifier: Annotated[
        Optional[str], pydantic.Field(alias="machineIdentifier")
    ] = None

    model: Optional[str] = None

    platform: Optional[str] = None

    platform_version: Annotated[
        Optional[str], pydantic.Field(alias="platformVersion")
    ] = None

    product: Optional[str] = None

    profile: Optional[str] = None

    remote_public_address: Annotated[
        Optional[str], pydantic.Field(alias="remotePublicAddress")
    ] = None

    state: Optional[str] = None

    title: Optional[str] = None

    version: Optional[str] = None

    local: Optional[bool] = None

    relayed: Optional[bool] = None

    secure: Optional[bool] = None

    user_id: Annotated[Optional[int], pydantic.Field(alias="userID")] = None


class SessionTypedDict(TypedDict):
    id: NotRequired[str]
    bandwidth: NotRequired[int]
    location: NotRequired[str]


class Session(BaseModel):
    id: Optional[str] = None

    bandwidth: Optional[int] = None

    location: Optional[str] = None


class GetSessionsMetadataTypedDict(TypedDict):
    added_at: NotRequired[int]
    art: NotRequired[str]
    duration: NotRequired[int]
    grandparent_art: NotRequired[str]
    grandparent_guid: NotRequired[str]
    grandparent_key: NotRequired[str]
    grandparent_rating_key: NotRequired[str]
    grandparent_thumb: NotRequired[str]
    grandparent_title: NotRequired[str]
    guid: NotRequired[str]
    index: NotRequired[int]
    key: NotRequired[str]
    library_section_id: NotRequired[str]
    library_section_key: NotRequired[str]
    library_section_title: NotRequired[str]
    music_analysis_version: NotRequired[str]
    parent_guid: NotRequired[str]
    parent_index: NotRequired[int]
    parent_key: NotRequired[str]
    parent_rating_key: NotRequired[str]
    parent_studio: NotRequired[str]
    parent_thumb: NotRequired[str]
    parent_title: NotRequired[str]
    parent_year: NotRequired[int]
    rating_count: NotRequired[int]
    rating_key: NotRequired[str]
    session_key: NotRequired[str]
    thumb: NotRequired[str]
    title: NotRequired[str]
    title_sort: NotRequired[str]
    type: NotRequired[str]
    updated_at: NotRequired[int]
    view_offset: NotRequired[int]
    media: NotRequired[List[GetSessionsMediaTypedDict]]
    user: NotRequired[GetSessionsUserTypedDict]
    player: NotRequired[PlayerTypedDict]
    session: NotRequired[SessionTypedDict]


class GetSessionsMetadata(BaseModel):
    added_at: Annotated[Optional[int], pydantic.Field(alias="addedAt")] = None

    art: Optional[str] = None

    duration: Optional[int] = None

    grandparent_art: Annotated[
        Optional[str], pydantic.Field(alias="grandparentArt")
    ] = None

    grandparent_guid: Annotated[
        Optional[str], pydantic.Field(alias="grandparentGuid")
    ] = None

    grandparent_key: Annotated[
        Optional[str], pydantic.Field(alias="grandparentKey")
    ] = None

    grandparent_rating_key: Annotated[
        Optional[str], pydantic.Field(alias="grandparentRatingKey")
    ] = None

    grandparent_thumb: Annotated[
        Optional[str], pydantic.Field(alias="grandparentThumb")
    ] = None

    grandparent_title: Annotated[
        Optional[str], pydantic.Field(alias="grandparentTitle")
    ] = None

    guid: Optional[str] = None

    index: Optional[int] = None

    key: Optional[str] = None

    library_section_id: Annotated[
        Optional[str], pydantic.Field(alias="librarySectionID")
    ] = None

    library_section_key: Annotated[
        Optional[str], pydantic.Field(alias="librarySectionKey")
    ] = None

    library_section_title: Annotated[
        Optional[str], pydantic.Field(alias="librarySectionTitle")
    ] = None

    music_analysis_version: Annotated[
        Optional[str], pydantic.Field(alias="musicAnalysisVersion")
    ] = None

    parent_guid: Annotated[Optional[str], pydantic.Field(alias="parentGuid")] = None

    parent_index: Annotated[Optional[int], pydantic.Field(alias="parentIndex")] = None

    parent_key: Annotated[Optional[str], pydantic.Field(alias="parentKey")] = None

    parent_rating_key: Annotated[
        Optional[str], pydantic.Field(alias="parentRatingKey")
    ] = None

    parent_studio: Annotated[Optional[str], pydantic.Field(alias="parentStudio")] = None

    parent_thumb: Annotated[Optional[str], pydantic.Field(alias="parentThumb")] = None

    parent_title: Annotated[Optional[str], pydantic.Field(alias="parentTitle")] = None

    parent_year: Annotated[Optional[int], pydantic.Field(alias="parentYear")] = None

    rating_count: Annotated[Optional[int], pydantic.Field(alias="ratingCount")] = None

    rating_key: Annotated[Optional[str], pydantic.Field(alias="ratingKey")] = None

    session_key: Annotated[Optional[str], pydantic.Field(alias="sessionKey")] = None

    thumb: Optional[str] = None

    title: Optional[str] = None

    title_sort: Annotated[Optional[str], pydantic.Field(alias="titleSort")] = None

    type: Optional[str] = None

    updated_at: Annotated[Optional[int], pydantic.Field(alias="updatedAt")] = None

    view_offset: Annotated[Optional[int], pydantic.Field(alias="viewOffset")] = None

    media: Annotated[
        Optional[List[GetSessionsMedia]], pydantic.Field(alias="Media")
    ] = None

    user: Annotated[Optional[GetSessionsUser], pydantic.Field(alias="User")] = None

    player: Annotated[Optional[Player], pydantic.Field(alias="Player")] = None

    session: Annotated[Optional[Session], pydantic.Field(alias="Session")] = None


class GetSessionsMediaContainerTypedDict(TypedDict):
    size: NotRequired[int]
    metadata: NotRequired[List[GetSessionsMetadataTypedDict]]


class GetSessionsMediaContainer(BaseModel):
    size: Optional[int] = None

    metadata: Annotated[
        Optional[List[GetSessionsMetadata]], pydantic.Field(alias="Metadata")
    ] = None


class GetSessionsResponseBodyTypedDict(TypedDict):
    r"""List of Active Plex Sessions"""

    media_container: NotRequired[GetSessionsMediaContainerTypedDict]


class GetSessionsResponseBody(BaseModel):
    r"""List of Active Plex Sessions"""

    media_container: Annotated[
        Optional[GetSessionsMediaContainer], pydantic.Field(alias="MediaContainer")
    ] = None


class GetSessionsResponseTypedDict(TypedDict):
    content_type: str
    r"""HTTP response content type for this operation"""
    status_code: int
    r"""HTTP response status code for this operation"""
    raw_response: httpx.Response
    r"""Raw HTTP response; suitable for custom response parsing"""
    object: NotRequired[GetSessionsResponseBodyTypedDict]
    r"""List of Active Plex Sessions"""


class GetSessionsResponse(BaseModel):
    content_type: str
    r"""HTTP response content type for this operation"""

    status_code: int
    r"""HTTP response status code for this operation"""

    raw_response: httpx.Response
    r"""Raw HTTP response; suitable for custom response parsing"""

    object: Optional[GetSessionsResponseBody] = None
    r"""List of Active Plex Sessions"""
