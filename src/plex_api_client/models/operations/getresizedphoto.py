"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
import httpx
from plex_api_client.types import BaseModel
from plex_api_client.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing_extensions import Annotated, TypedDict


class MinSize(int, Enum):
    r"""images are always scaled proportionally. A value of '1' in minSize will make the smaller native dimension the dimension resized against."""

    ZERO = 0
    ONE = 1


class Upscale(int, Enum):
    r"""allow images to be resized beyond native dimensions."""

    ZERO = 0
    ONE = 1


class GetResizedPhotoRequestTypedDict(TypedDict):
    width: float
    r"""The width for the resized photo"""
    height: float
    r"""The height for the resized photo"""
    blur: float
    r"""The width for the resized photo"""
    min_size: MinSize
    r"""images are always scaled proportionally. A value of '1' in minSize will make the smaller native dimension the dimension resized against."""
    upscale: Upscale
    r"""allow images to be resized beyond native dimensions."""
    url: str
    r"""path to image within Plex"""
    opacity: int
    r"""The opacity for the resized photo"""


class GetResizedPhotoRequest(BaseModel):
    width: Annotated[
        float, FieldMetadata(query=QueryParamMetadata(style="form", explode=True))
    ]
    r"""The width for the resized photo"""

    height: Annotated[
        float, FieldMetadata(query=QueryParamMetadata(style="form", explode=True))
    ]
    r"""The height for the resized photo"""

    blur: Annotated[
        float, FieldMetadata(query=QueryParamMetadata(style="form", explode=True))
    ]
    r"""The width for the resized photo"""

    min_size: Annotated[
        MinSize,
        pydantic.Field(alias="minSize"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]
    r"""images are always scaled proportionally. A value of '1' in minSize will make the smaller native dimension the dimension resized against."""

    upscale: Annotated[
        Upscale, FieldMetadata(query=QueryParamMetadata(style="form", explode=True))
    ]
    r"""allow images to be resized beyond native dimensions."""

    url: Annotated[
        str, FieldMetadata(query=QueryParamMetadata(style="form", explode=True))
    ]
    r"""path to image within Plex"""

    opacity: Annotated[
        int, FieldMetadata(query=QueryParamMetadata(style="form", explode=True))
    ] = 100
    r"""The opacity for the resized photo"""


class GetResizedPhotoResponseTypedDict(TypedDict):
    content_type: str
    r"""HTTP response content type for this operation"""
    status_code: int
    r"""HTTP response status code for this operation"""
    raw_response: httpx.Response
    r"""Raw HTTP response; suitable for custom response parsing"""


class GetResizedPhotoResponse(BaseModel):
    content_type: str
    r"""HTTP response content type for this operation"""

    status_code: int
    r"""HTTP response status code for this operation"""

    raw_response: httpx.Response
    r"""Raw HTTP response; suitable for custom response parsing"""
