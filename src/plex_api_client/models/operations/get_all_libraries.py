"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
import httpx
from plex_api_client.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetAllLibrariesType(str, Enum):
    r"""The library type"""

    MOVIE = "movie"
    TV_SHOW = "show"
    SEASON = "season"
    EPISODE = "episode"
    ARTIST = "artist"
    ALBUM = "album"


class Hidden(int, Enum):
    r"""UNKNOWN"""

    DISABLE = 0
    ENABLE = 1


class GetAllLibrariesLocationTypedDict(TypedDict):
    id: int
    r"""The ID of the location."""
    path: str
    r"""The path to the media item."""


class GetAllLibrariesLocation(BaseModel):
    id: int
    r"""The ID of the location."""

    path: str
    r"""The path to the media item."""


class GetAllLibrariesDirectoryTypedDict(TypedDict):
    allow_sync: bool
    r"""Indicates whether syncing is allowed."""
    art: str
    r"""URL for the background artwork of the media container."""
    composite: str
    r"""The relative path to the composite media item."""
    filters: bool
    r"""UNKNOWN"""
    refreshing: bool
    r"""Indicates whether the library is currently being refreshed or updated"""
    thumb: str
    r"""URL for the thumbnail image of the media container."""
    key: str
    r"""The library key representing the unique identifier"""
    type: GetAllLibrariesType
    title: str
    r"""The title of the library"""
    agent: str
    r"""The Plex agent used to match and retrieve media metadata."""
    scanner: str
    r"""UNKNOWN"""
    language: str
    r"""The Plex library language that has been set"""
    uuid: str
    r"""The universally unique identifier for the library."""
    updated_at: int
    r"""Unix epoch datetime in seconds"""
    scanned_at: int
    r"""Unix epoch datetime in seconds"""
    content: bool
    r"""UNKNOWN"""
    directory: bool
    r"""UNKNOWN"""
    content_changed_at: int
    r"""The number of seconds since the content was last changed relative to now."""
    location: List[GetAllLibrariesLocationTypedDict]
    created_at: NotRequired[int]
    hidden: NotRequired[Hidden]


class GetAllLibrariesDirectory(BaseModel):
    allow_sync: Annotated[bool, pydantic.Field(alias="allowSync")]
    r"""Indicates whether syncing is allowed."""

    art: str
    r"""URL for the background artwork of the media container."""

    composite: str
    r"""The relative path to the composite media item."""

    filters: bool
    r"""UNKNOWN"""

    refreshing: bool
    r"""Indicates whether the library is currently being refreshed or updated"""

    thumb: str
    r"""URL for the thumbnail image of the media container."""

    key: str
    r"""The library key representing the unique identifier"""

    type: GetAllLibrariesType

    title: str
    r"""The title of the library"""

    agent: str
    r"""The Plex agent used to match and retrieve media metadata."""

    scanner: str
    r"""UNKNOWN"""

    language: str
    r"""The Plex library language that has been set"""

    uuid: str
    r"""The universally unique identifier for the library."""

    updated_at: Annotated[int, pydantic.Field(alias="updatedAt")]
    r"""Unix epoch datetime in seconds"""

    scanned_at: Annotated[int, pydantic.Field(alias="scannedAt")]
    r"""Unix epoch datetime in seconds"""

    content: bool
    r"""UNKNOWN"""

    directory: bool
    r"""UNKNOWN"""

    content_changed_at: Annotated[int, pydantic.Field(alias="contentChangedAt")]
    r"""The number of seconds since the content was last changed relative to now."""

    location: Annotated[List[GetAllLibrariesLocation], pydantic.Field(alias="Location")]

    created_at: Annotated[Optional[int], pydantic.Field(alias="createdAt")] = None

    hidden: Optional[Hidden] = Hidden.DISABLE


class GetAllLibrariesMediaContainerTypedDict(TypedDict):
    size: int
    r"""Number of media items returned in this response."""
    allow_sync: bool
    r"""Indicates whether syncing is allowed."""
    title1: str
    r"""The primary title of the media container."""
    directory: NotRequired[List[GetAllLibrariesDirectoryTypedDict]]


class GetAllLibrariesMediaContainer(BaseModel):
    size: int
    r"""Number of media items returned in this response."""

    allow_sync: Annotated[bool, pydantic.Field(alias="allowSync")]
    r"""Indicates whether syncing is allowed."""

    title1: str
    r"""The primary title of the media container."""

    directory: Annotated[
        Optional[List[GetAllLibrariesDirectory]], pydantic.Field(alias="Directory")
    ] = None


class GetAllLibrariesResponseBodyTypedDict(TypedDict):
    r"""The libraries available on the Server"""

    media_container: NotRequired[GetAllLibrariesMediaContainerTypedDict]


class GetAllLibrariesResponseBody(BaseModel):
    r"""The libraries available on the Server"""

    media_container: Annotated[
        Optional[GetAllLibrariesMediaContainer], pydantic.Field(alias="MediaContainer")
    ] = None


class GetAllLibrariesResponseTypedDict(TypedDict):
    content_type: str
    r"""HTTP response content type for this operation"""
    status_code: int
    r"""HTTP response status code for this operation"""
    raw_response: httpx.Response
    r"""Raw HTTP response; suitable for custom response parsing"""
    object: NotRequired[GetAllLibrariesResponseBodyTypedDict]
    r"""The libraries available on the Server"""


class GetAllLibrariesResponse(BaseModel):
    content_type: str
    r"""HTTP response content type for this operation"""

    status_code: int
    r"""HTTP response status code for this operation"""

    raw_response: httpx.Response
    r"""Raw HTTP response; suitable for custom response parsing"""

    object: Optional[GetAllLibrariesResponseBody] = None
    r"""The libraries available on the Server"""
