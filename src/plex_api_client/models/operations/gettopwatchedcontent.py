"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import date
from enum import Enum
import httpx
from plex_api_client.types import BaseModel
from plex_api_client.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetTopWatchedContentQueryParamType(int, Enum):
    r"""The type of media to retrieve.
    1 = movie
    2 = show
    3 = season
    4 = episode
    E.g. A movie library will not return anything with type 3 as there are no seasons for movie libraries

    """

    MOVIE = 1
    TV_SHOW = 2
    SEASON = 3
    EPISODE = 4
    AUDIO = 8


class GetTopWatchedContentRequestTypedDict(TypedDict):
    type: GetTopWatchedContentQueryParamType
    r"""The type of media to retrieve.
    1 = movie
    2 = show
    3 = season
    4 = episode
    E.g. A movie library will not return anything with type 3 as there are no seasons for movie libraries

    """
    include_guids: NotRequired[int]
    r"""Adds the Guids object to the response

    """


class GetTopWatchedContentRequest(BaseModel):
    type: Annotated[
        GetTopWatchedContentQueryParamType,
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]
    r"""The type of media to retrieve.
    1 = movie
    2 = show
    3 = season
    4 = episode
    E.g. A movie library will not return anything with type 3 as there are no seasons for movie libraries

    """

    include_guids: Annotated[
        Optional[int],
        pydantic.Field(alias="includeGuids"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Adds the Guids object to the response

    """


class GetTopWatchedContentGenreTypedDict(TypedDict):
    id: NotRequired[int]
    filter_: NotRequired[str]
    tag: NotRequired[str]


class GetTopWatchedContentGenre(BaseModel):
    id: Optional[int] = None

    filter_: Annotated[Optional[str], pydantic.Field(alias="filter")] = None

    tag: Optional[str] = None


class GetTopWatchedContentCountryTypedDict(TypedDict):
    id: NotRequired[int]
    filter_: NotRequired[str]
    tag: NotRequired[str]


class GetTopWatchedContentCountry(BaseModel):
    id: Optional[int] = None

    filter_: Annotated[Optional[str], pydantic.Field(alias="filter")] = None

    tag: Optional[str] = None


class GetTopWatchedContentGuidsTypedDict(TypedDict):
    id: NotRequired[str]


class GetTopWatchedContentGuids(BaseModel):
    id: Optional[str] = None


class GetTopWatchedContentRoleTypedDict(TypedDict):
    id: NotRequired[int]
    filter_: NotRequired[str]
    tag: NotRequired[str]
    tag_key: NotRequired[str]
    role: NotRequired[str]
    thumb: NotRequired[str]


class GetTopWatchedContentRole(BaseModel):
    id: Optional[int] = None

    filter_: Annotated[Optional[str], pydantic.Field(alias="filter")] = None

    tag: Optional[str] = None

    tag_key: Annotated[Optional[str], pydantic.Field(alias="tagKey")] = None

    role: Optional[str] = None

    thumb: Optional[str] = None


class UserTypedDict(TypedDict):
    id: NotRequired[int]


class User(BaseModel):
    id: Optional[int] = None


class GetTopWatchedContentMetadataTypedDict(TypedDict):
    rating_key: NotRequired[str]
    key: NotRequired[str]
    guid: NotRequired[str]
    slug: NotRequired[str]
    studio: NotRequired[str]
    type: NotRequired[str]
    title: NotRequired[str]
    library_section_title: NotRequired[str]
    library_section_id: NotRequired[int]
    library_section_key: NotRequired[str]
    content_rating: NotRequired[str]
    summary: NotRequired[str]
    index: NotRequired[int]
    audience_rating: NotRequired[float]
    year: NotRequired[int]
    tagline: NotRequired[str]
    thumb: NotRequired[str]
    art: NotRequired[str]
    duration: NotRequired[int]
    originally_available_at: NotRequired[date]
    leaf_count: NotRequired[int]
    viewed_leaf_count: NotRequired[int]
    child_count: NotRequired[int]
    added_at: NotRequired[int]
    updated_at: NotRequired[int]
    global_view_count: NotRequired[int]
    audience_rating_image: NotRequired[str]
    genre: NotRequired[List[GetTopWatchedContentGenreTypedDict]]
    country: NotRequired[List[GetTopWatchedContentCountryTypedDict]]
    guids: NotRequired[List[GetTopWatchedContentGuidsTypedDict]]
    role: NotRequired[List[GetTopWatchedContentRoleTypedDict]]
    user: NotRequired[List[UserTypedDict]]


class GetTopWatchedContentMetadata(BaseModel):
    rating_key: Annotated[Optional[str], pydantic.Field(alias="ratingKey")] = None

    key: Optional[str] = None

    guid: Optional[str] = None

    slug: Optional[str] = None

    studio: Optional[str] = None

    type: Optional[str] = None

    title: Optional[str] = None

    library_section_title: Annotated[
        Optional[str], pydantic.Field(alias="librarySectionTitle")
    ] = None

    library_section_id: Annotated[
        Optional[int], pydantic.Field(alias="librarySectionID")
    ] = None

    library_section_key: Annotated[
        Optional[str], pydantic.Field(alias="librarySectionKey")
    ] = None

    content_rating: Annotated[Optional[str], pydantic.Field(alias="contentRating")] = (
        None
    )

    summary: Optional[str] = None

    index: Optional[int] = None

    audience_rating: Annotated[
        Optional[float], pydantic.Field(alias="audienceRating")
    ] = None

    year: Optional[int] = None

    tagline: Optional[str] = None

    thumb: Optional[str] = None

    art: Optional[str] = None

    duration: Optional[int] = None

    originally_available_at: Annotated[
        Optional[date], pydantic.Field(alias="originallyAvailableAt")
    ] = None

    leaf_count: Annotated[Optional[int], pydantic.Field(alias="leafCount")] = None

    viewed_leaf_count: Annotated[
        Optional[int], pydantic.Field(alias="viewedLeafCount")
    ] = None

    child_count: Annotated[Optional[int], pydantic.Field(alias="childCount")] = None

    added_at: Annotated[Optional[int], pydantic.Field(alias="addedAt")] = None

    updated_at: Annotated[Optional[int], pydantic.Field(alias="updatedAt")] = None

    global_view_count: Annotated[
        Optional[int], pydantic.Field(alias="globalViewCount")
    ] = None

    audience_rating_image: Annotated[
        Optional[str], pydantic.Field(alias="audienceRatingImage")
    ] = None

    genre: Annotated[
        Optional[List[GetTopWatchedContentGenre]], pydantic.Field(alias="Genre")
    ] = None

    country: Annotated[
        Optional[List[GetTopWatchedContentCountry]], pydantic.Field(alias="Country")
    ] = None

    guids: Annotated[
        Optional[List[GetTopWatchedContentGuids]], pydantic.Field(alias="Guid")
    ] = None

    role: Annotated[
        Optional[List[GetTopWatchedContentRole]], pydantic.Field(alias="Role")
    ] = None

    user: Annotated[Optional[List[User]], pydantic.Field(alias="User")] = None


class GetTopWatchedContentMediaContainerTypedDict(TypedDict):
    size: NotRequired[int]
    allow_sync: NotRequired[bool]
    identifier: NotRequired[str]
    media_tag_prefix: NotRequired[str]
    media_tag_version: NotRequired[int]
    metadata: NotRequired[List[GetTopWatchedContentMetadataTypedDict]]


class GetTopWatchedContentMediaContainer(BaseModel):
    size: Optional[int] = None

    allow_sync: Annotated[Optional[bool], pydantic.Field(alias="allowSync")] = None

    identifier: Optional[str] = None

    media_tag_prefix: Annotated[
        Optional[str], pydantic.Field(alias="mediaTagPrefix")
    ] = None

    media_tag_version: Annotated[
        Optional[int], pydantic.Field(alias="mediaTagVersion")
    ] = None

    metadata: Annotated[
        Optional[List[GetTopWatchedContentMetadata]], pydantic.Field(alias="Metadata")
    ] = None


class GetTopWatchedContentResponseBodyTypedDict(TypedDict):
    r"""The metadata of the library item."""

    media_container: NotRequired[GetTopWatchedContentMediaContainerTypedDict]


class GetTopWatchedContentResponseBody(BaseModel):
    r"""The metadata of the library item."""

    media_container: Annotated[
        Optional[GetTopWatchedContentMediaContainer],
        pydantic.Field(alias="MediaContainer"),
    ] = None


class GetTopWatchedContentResponseTypedDict(TypedDict):
    content_type: str
    r"""HTTP response content type for this operation"""
    status_code: int
    r"""HTTP response status code for this operation"""
    raw_response: httpx.Response
    r"""Raw HTTP response; suitable for custom response parsing"""
    object: NotRequired[GetTopWatchedContentResponseBodyTypedDict]
    r"""The metadata of the library item."""


class GetTopWatchedContentResponse(BaseModel):
    content_type: str
    r"""HTTP response content type for this operation"""

    status_code: int
    r"""HTTP response status code for this operation"""

    raw_response: httpx.Response
    r"""Raw HTTP response; suitable for custom response parsing"""

    object: Optional[GetTopWatchedContentResponseBody] = None
    r"""The metadata of the library item."""
