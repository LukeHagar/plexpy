"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
import httpx
from plex_api_client.types import BaseModel
from plex_api_client.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class CreatePlaylistQueryParamType(str, Enum):
    r"""type of playlist to create"""

    AUDIO = "audio"
    VIDEO = "video"
    PHOTO = "photo"


class Smart(int, Enum):
    r"""whether the playlist is smart or not"""

    ZERO = 0
    ONE = 1


class CreatePlaylistRequestTypedDict(TypedDict):
    title: str
    r"""name of the playlist"""
    type: CreatePlaylistQueryParamType
    r"""type of playlist to create"""
    smart: Smart
    r"""whether the playlist is smart or not"""
    uri: str
    r"""the content URI for the playlist"""
    play_queue_id: NotRequired[float]
    r"""the play queue to copy to a playlist"""


class CreatePlaylistRequest(BaseModel):
    title: Annotated[
        str, FieldMetadata(query=QueryParamMetadata(style="form", explode=True))
    ]
    r"""name of the playlist"""

    type: Annotated[
        CreatePlaylistQueryParamType,
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]
    r"""type of playlist to create"""

    smart: Annotated[
        Smart, FieldMetadata(query=QueryParamMetadata(style="form", explode=True))
    ]
    r"""whether the playlist is smart or not"""

    uri: Annotated[
        str, FieldMetadata(query=QueryParamMetadata(style="form", explode=True))
    ]
    r"""the content URI for the playlist"""

    play_queue_id: Annotated[
        Optional[float],
        pydantic.Field(alias="playQueueID"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""the play queue to copy to a playlist"""


class CreatePlaylistMetadataTypedDict(TypedDict):
    rating_key: NotRequired[str]
    key: NotRequired[str]
    guid: NotRequired[str]
    type: NotRequired[str]
    title: NotRequired[str]
    summary: NotRequired[str]
    smart: NotRequired[bool]
    playlist_type: NotRequired[str]
    icon: NotRequired[str]
    view_count: NotRequired[int]
    last_viewed_at: NotRequired[int]
    leaf_count: NotRequired[int]
    added_at: NotRequired[int]
    updated_at: NotRequired[int]
    composite: NotRequired[str]
    duration: NotRequired[int]


class CreatePlaylistMetadata(BaseModel):
    rating_key: Annotated[Optional[str], pydantic.Field(alias="ratingKey")] = None

    key: Optional[str] = None

    guid: Optional[str] = None

    type: Optional[str] = None

    title: Optional[str] = None

    summary: Optional[str] = None

    smart: Optional[bool] = None

    playlist_type: Annotated[Optional[str], pydantic.Field(alias="playlistType")] = None

    icon: Optional[str] = None

    view_count: Annotated[Optional[int], pydantic.Field(alias="viewCount")] = None

    last_viewed_at: Annotated[Optional[int], pydantic.Field(alias="lastViewedAt")] = (
        None
    )

    leaf_count: Annotated[Optional[int], pydantic.Field(alias="leafCount")] = None

    added_at: Annotated[Optional[int], pydantic.Field(alias="addedAt")] = None

    updated_at: Annotated[Optional[int], pydantic.Field(alias="updatedAt")] = None

    composite: Optional[str] = None

    duration: Optional[int] = None


class CreatePlaylistMediaContainerTypedDict(TypedDict):
    size: NotRequired[int]
    metadata: NotRequired[List[CreatePlaylistMetadataTypedDict]]


class CreatePlaylistMediaContainer(BaseModel):
    size: Optional[int] = None

    metadata: Annotated[
        Optional[List[CreatePlaylistMetadata]], pydantic.Field(alias="Metadata")
    ] = None


class CreatePlaylistResponseBodyTypedDict(TypedDict):
    r"""returns all playlists"""

    media_container: NotRequired[CreatePlaylistMediaContainerTypedDict]


class CreatePlaylistResponseBody(BaseModel):
    r"""returns all playlists"""

    media_container: Annotated[
        Optional[CreatePlaylistMediaContainer], pydantic.Field(alias="MediaContainer")
    ] = None


class CreatePlaylistResponseTypedDict(TypedDict):
    content_type: str
    r"""HTTP response content type for this operation"""
    status_code: int
    r"""HTTP response status code for this operation"""
    raw_response: httpx.Response
    r"""Raw HTTP response; suitable for custom response parsing"""
    object: NotRequired[CreatePlaylistResponseBodyTypedDict]
    r"""returns all playlists"""


class CreatePlaylistResponse(BaseModel):
    content_type: str
    r"""HTTP response content type for this operation"""

    status_code: int
    r"""HTTP response status code for this operation"""

    raw_response: httpx.Response
    r"""Raw HTTP response; suitable for custom response parsing"""

    object: Optional[CreatePlaylistResponseBody] = None
    r"""returns all playlists"""
