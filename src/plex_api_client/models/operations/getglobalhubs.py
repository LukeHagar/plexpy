"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
import httpx
from plex_api_client.types import BaseModel
from plex_api_client.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class OnlyTransient(int, Enum):
    r"""Only return hubs which are \"transient\", meaning those which are prone to changing after media playback or addition (e.g. On Deck, or Recently Added)."""

    ZERO = 0
    ONE = 1


class GetGlobalHubsRequestTypedDict(TypedDict):
    count: NotRequired[float]
    r"""The number of items to return with each hub."""
    only_transient: NotRequired[OnlyTransient]
    r"""Only return hubs which are \"transient\", meaning those which are prone to changing after media playback or addition (e.g. On Deck, or Recently Added)."""


class GetGlobalHubsRequest(BaseModel):
    count: Annotated[
        Optional[float],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""The number of items to return with each hub."""

    only_transient: Annotated[
        Optional[OnlyTransient],
        pydantic.Field(alias="onlyTransient"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Only return hubs which are \"transient\", meaning those which are prone to changing after media playback or addition (e.g. On Deck, or Recently Added)."""


class GetGlobalHubsMetadataTypedDict(TypedDict):
    rating_key: NotRequired[str]
    key: NotRequired[str]
    guid: NotRequired[str]
    type: NotRequired[str]
    title: NotRequired[str]
    title_sort: NotRequired[str]
    summary: NotRequired[str]
    smart: NotRequired[bool]
    playlist_type: NotRequired[str]
    composite: NotRequired[str]
    icon: NotRequired[str]
    view_count: NotRequired[int]
    last_viewed_at: NotRequired[int]
    duration: NotRequired[int]
    leaf_count: NotRequired[int]
    added_at: NotRequired[int]
    updated_at: NotRequired[int]


class GetGlobalHubsMetadata(BaseModel):
    rating_key: Annotated[Optional[str], pydantic.Field(alias="ratingKey")] = None

    key: Optional[str] = None

    guid: Optional[str] = None

    type: Optional[str] = None

    title: Optional[str] = None

    title_sort: Annotated[Optional[str], pydantic.Field(alias="titleSort")] = None

    summary: Optional[str] = None

    smart: Optional[bool] = None

    playlist_type: Annotated[Optional[str], pydantic.Field(alias="playlistType")] = None

    composite: Optional[str] = None

    icon: Optional[str] = None

    view_count: Annotated[Optional[int], pydantic.Field(alias="viewCount")] = None

    last_viewed_at: Annotated[Optional[int], pydantic.Field(alias="lastViewedAt")] = (
        None
    )

    duration: Optional[int] = None

    leaf_count: Annotated[Optional[int], pydantic.Field(alias="leafCount")] = None

    added_at: Annotated[Optional[int], pydantic.Field(alias="addedAt")] = None

    updated_at: Annotated[Optional[int], pydantic.Field(alias="updatedAt")] = None


class HubTypedDict(TypedDict):
    hub_key: NotRequired[str]
    key: NotRequired[str]
    title: NotRequired[str]
    type: NotRequired[str]
    hub_identifier: NotRequired[str]
    context: NotRequired[str]
    size: NotRequired[int]
    more: NotRequired[bool]
    style: NotRequired[str]
    promoted: NotRequired[bool]
    metadata: NotRequired[List[GetGlobalHubsMetadataTypedDict]]


class Hub(BaseModel):
    hub_key: Annotated[Optional[str], pydantic.Field(alias="hubKey")] = None

    key: Optional[str] = None

    title: Optional[str] = None

    type: Optional[str] = None

    hub_identifier: Annotated[Optional[str], pydantic.Field(alias="hubIdentifier")] = (
        None
    )

    context: Optional[str] = None

    size: Optional[int] = None

    more: Optional[bool] = None

    style: Optional[str] = None

    promoted: Optional[bool] = None

    metadata: Annotated[
        Optional[List[GetGlobalHubsMetadata]], pydantic.Field(alias="Metadata")
    ] = None


class GetGlobalHubsMediaContainerTypedDict(TypedDict):
    size: NotRequired[int]
    allow_sync: NotRequired[bool]
    identifier: NotRequired[str]
    hub: NotRequired[List[HubTypedDict]]


class GetGlobalHubsMediaContainer(BaseModel):
    size: Optional[int] = None

    allow_sync: Annotated[Optional[bool], pydantic.Field(alias="allowSync")] = None

    identifier: Optional[str] = None

    hub: Annotated[Optional[List[Hub]], pydantic.Field(alias="Hub")] = None


class GetGlobalHubsResponseBodyTypedDict(TypedDict):
    r"""returns global hubs"""

    media_container: NotRequired[GetGlobalHubsMediaContainerTypedDict]


class GetGlobalHubsResponseBody(BaseModel):
    r"""returns global hubs"""

    media_container: Annotated[
        Optional[GetGlobalHubsMediaContainer], pydantic.Field(alias="MediaContainer")
    ] = None


class GetGlobalHubsResponseTypedDict(TypedDict):
    content_type: str
    r"""HTTP response content type for this operation"""
    status_code: int
    r"""HTTP response status code for this operation"""
    raw_response: httpx.Response
    r"""Raw HTTP response; suitable for custom response parsing"""
    object: NotRequired[GetGlobalHubsResponseBodyTypedDict]
    r"""returns global hubs"""


class GetGlobalHubsResponse(BaseModel):
    content_type: str
    r"""HTTP response content type for this operation"""

    status_code: int
    r"""HTTP response status code for this operation"""

    raw_response: httpx.Response
    r"""Raw HTTP response; suitable for custom response parsing"""

    object: Optional[GetGlobalHubsResponseBody] = None
    r"""returns global hubs"""
