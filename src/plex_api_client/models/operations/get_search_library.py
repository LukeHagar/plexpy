"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
import httpx
from plex_api_client.types import BaseModel
from plex_api_client.utils import FieldMetadata, PathParamMetadata, QueryParamMetadata
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetSearchLibraryQueryParamType(int, Enum):
    r"""The type of media to retrieve.
    1 = movie
    2 = show
    3 = season
    4 = episode
    E.g. A movie library will not return anything with type 3 as there are no seasons for movie libraries

    """

    MOVIE = 1
    TV_SHOW = 2
    SEASON = 3
    EPISODE = 4
    AUDIO = 8


class GetSearchLibraryRequestTypedDict(TypedDict):
    section_key: int
    r"""The unique key of the Plex library.
    Note: This is unique in the context of the Plex server.

    """
    type: GetSearchLibraryQueryParamType
    r"""The type of media to retrieve.
    1 = movie
    2 = show
    3 = season
    4 = episode
    E.g. A movie library will not return anything with type 3 as there are no seasons for movie libraries

    """


class GetSearchLibraryRequest(BaseModel):
    section_key: Annotated[
        int,
        pydantic.Field(alias="sectionKey"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""The unique key of the Plex library.
    Note: This is unique in the context of the Plex server.

    """

    type: Annotated[
        GetSearchLibraryQueryParamType,
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]
    r"""The type of media to retrieve.
    1 = movie
    2 = show
    3 = season
    4 = episode
    E.g. A movie library will not return anything with type 3 as there are no seasons for movie libraries

    """


class GetSearchLibraryMetadataTypedDict(TypedDict):
    rating_key: NotRequired[str]
    key: NotRequired[str]
    parent_rating_key: NotRequired[str]
    guid: NotRequired[str]
    parent_guid: NotRequired[str]
    parent_studio: NotRequired[str]
    type: NotRequired[str]
    title: NotRequired[str]
    parent_key: NotRequired[str]
    parent_title: NotRequired[str]
    summary: NotRequired[str]
    index: NotRequired[int]
    parent_index: NotRequired[int]
    parent_year: NotRequired[int]
    thumb: NotRequired[str]
    art: NotRequired[str]
    parent_thumb: NotRequired[str]
    parent_theme: NotRequired[str]
    added_at: NotRequired[int]
    updated_at: NotRequired[int]


class GetSearchLibraryMetadata(BaseModel):
    rating_key: Annotated[Optional[str], pydantic.Field(alias="ratingKey")] = None

    key: Optional[str] = None

    parent_rating_key: Annotated[
        Optional[str], pydantic.Field(alias="parentRatingKey")
    ] = None

    guid: Optional[str] = None

    parent_guid: Annotated[Optional[str], pydantic.Field(alias="parentGuid")] = None

    parent_studio: Annotated[Optional[str], pydantic.Field(alias="parentStudio")] = None

    type: Optional[str] = None

    title: Optional[str] = None

    parent_key: Annotated[Optional[str], pydantic.Field(alias="parentKey")] = None

    parent_title: Annotated[Optional[str], pydantic.Field(alias="parentTitle")] = None

    summary: Optional[str] = None

    index: Optional[int] = None

    parent_index: Annotated[Optional[int], pydantic.Field(alias="parentIndex")] = None

    parent_year: Annotated[Optional[int], pydantic.Field(alias="parentYear")] = None

    thumb: Optional[str] = None

    art: Optional[str] = None

    parent_thumb: Annotated[Optional[str], pydantic.Field(alias="parentThumb")] = None

    parent_theme: Annotated[Optional[str], pydantic.Field(alias="parentTheme")] = None

    added_at: Annotated[Optional[int], pydantic.Field(alias="addedAt")] = None

    updated_at: Annotated[Optional[int], pydantic.Field(alias="updatedAt")] = None


class GetSearchLibraryMediaContainerTypedDict(TypedDict):
    size: NotRequired[int]
    allow_sync: NotRequired[bool]
    art: NotRequired[str]
    identifier: NotRequired[str]
    media_tag_prefix: NotRequired[str]
    media_tag_version: NotRequired[int]
    nocache: NotRequired[bool]
    thumb: NotRequired[str]
    title1: NotRequired[str]
    title2: NotRequired[str]
    view_group: NotRequired[str]
    view_mode: NotRequired[int]
    metadata: NotRequired[List[GetSearchLibraryMetadataTypedDict]]


class GetSearchLibraryMediaContainer(BaseModel):
    size: Optional[int] = None

    allow_sync: Annotated[Optional[bool], pydantic.Field(alias="allowSync")] = None

    art: Optional[str] = None

    identifier: Optional[str] = None

    media_tag_prefix: Annotated[
        Optional[str], pydantic.Field(alias="mediaTagPrefix")
    ] = None

    media_tag_version: Annotated[
        Optional[int], pydantic.Field(alias="mediaTagVersion")
    ] = None

    nocache: Optional[bool] = None

    thumb: Optional[str] = None

    title1: Optional[str] = None

    title2: Optional[str] = None

    view_group: Annotated[Optional[str], pydantic.Field(alias="viewGroup")] = None

    view_mode: Annotated[Optional[int], pydantic.Field(alias="viewMode")] = None

    metadata: Annotated[
        Optional[List[GetSearchLibraryMetadata]], pydantic.Field(alias="Metadata")
    ] = None


class GetSearchLibraryResponseBodyTypedDict(TypedDict):
    r"""The contents of the library by section and type"""

    media_container: NotRequired[GetSearchLibraryMediaContainerTypedDict]


class GetSearchLibraryResponseBody(BaseModel):
    r"""The contents of the library by section and type"""

    media_container: Annotated[
        Optional[GetSearchLibraryMediaContainer], pydantic.Field(alias="MediaContainer")
    ] = None


class GetSearchLibraryResponseTypedDict(TypedDict):
    content_type: str
    r"""HTTP response content type for this operation"""
    status_code: int
    r"""HTTP response status code for this operation"""
    raw_response: httpx.Response
    r"""Raw HTTP response; suitable for custom response parsing"""
    object: NotRequired[GetSearchLibraryResponseBodyTypedDict]
    r"""The contents of the library by section and type"""


class GetSearchLibraryResponse(BaseModel):
    content_type: str
    r"""HTTP response content type for this operation"""

    status_code: int
    r"""HTTP response status code for this operation"""

    raw_response: httpx.Response
    r"""Raw HTTP response; suitable for custom response parsing"""

    object: Optional[GetSearchLibraryResponseBody] = None
    r"""The contents of the library by section and type"""
