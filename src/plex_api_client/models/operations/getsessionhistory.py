"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import date
import httpx
from plex_api_client.types import BaseModel
from plex_api_client.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class QueryParamFilterTypedDict(TypedDict):
    r"""Filters content by field and direction/equality
    (Unknown if viewedAt is the only supported column)

    """


class QueryParamFilter(BaseModel):
    r"""Filters content by field and direction/equality
    (Unknown if viewedAt is the only supported column)

    """


class GetSessionHistoryRequestTypedDict(TypedDict):
    sort: NotRequired[str]
    r"""Sorts the results by the specified field followed by the direction (asc, desc)

    """
    account_id: NotRequired[int]
    r"""Filter results by those that are related to a specific users id

    """
    filter_: NotRequired[QueryParamFilterTypedDict]
    r"""Filters content by field and direction/equality
    (Unknown if viewedAt is the only supported column)

    """
    library_section_id: NotRequired[int]
    r"""Filters the results based on the id of a valid library section

    """


class GetSessionHistoryRequest(BaseModel):
    sort: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Sorts the results by the specified field followed by the direction (asc, desc)

    """

    account_id: Annotated[
        Optional[int],
        pydantic.Field(alias="accountId"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Filter results by those that are related to a specific users id

    """

    filter_: Annotated[
        Optional[QueryParamFilter],
        pydantic.Field(alias="filter"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Filters content by field and direction/equality
    (Unknown if viewedAt is the only supported column)

    """

    library_section_id: Annotated[
        Optional[int],
        pydantic.Field(alias="librarySectionID"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Filters the results based on the id of a valid library section

    """


class GetSessionHistoryMetadataTypedDict(TypedDict):
    history_key: NotRequired[str]
    key: NotRequired[str]
    rating_key: NotRequired[str]
    library_section_id: NotRequired[str]
    parent_key: NotRequired[str]
    grandparent_key: NotRequired[str]
    title: NotRequired[str]
    grandparent_title: NotRequired[str]
    type: NotRequired[str]
    thumb: NotRequired[str]
    parent_thumb: NotRequired[str]
    grandparent_thumb: NotRequired[str]
    grandparent_art: NotRequired[str]
    index: NotRequired[int]
    parent_index: NotRequired[int]
    originally_available_at: NotRequired[date]
    viewed_at: NotRequired[int]
    account_id: NotRequired[int]
    device_id: NotRequired[int]


class GetSessionHistoryMetadata(BaseModel):
    history_key: Annotated[Optional[str], pydantic.Field(alias="historyKey")] = None

    key: Optional[str] = None

    rating_key: Annotated[Optional[str], pydantic.Field(alias="ratingKey")] = None

    library_section_id: Annotated[
        Optional[str], pydantic.Field(alias="librarySectionID")
    ] = None

    parent_key: Annotated[Optional[str], pydantic.Field(alias="parentKey")] = None

    grandparent_key: Annotated[
        Optional[str], pydantic.Field(alias="grandparentKey")
    ] = None

    title: Optional[str] = None

    grandparent_title: Annotated[
        Optional[str], pydantic.Field(alias="grandparentTitle")
    ] = None

    type: Optional[str] = None

    thumb: Optional[str] = None

    parent_thumb: Annotated[Optional[str], pydantic.Field(alias="parentThumb")] = None

    grandparent_thumb: Annotated[
        Optional[str], pydantic.Field(alias="grandparentThumb")
    ] = None

    grandparent_art: Annotated[
        Optional[str], pydantic.Field(alias="grandparentArt")
    ] = None

    index: Optional[int] = None

    parent_index: Annotated[Optional[int], pydantic.Field(alias="parentIndex")] = None

    originally_available_at: Annotated[
        Optional[date], pydantic.Field(alias="originallyAvailableAt")
    ] = None

    viewed_at: Annotated[Optional[int], pydantic.Field(alias="viewedAt")] = None

    account_id: Annotated[Optional[int], pydantic.Field(alias="accountID")] = None

    device_id: Annotated[Optional[int], pydantic.Field(alias="deviceID")] = None


class GetSessionHistoryMediaContainerTypedDict(TypedDict):
    size: NotRequired[int]
    metadata: NotRequired[List[GetSessionHistoryMetadataTypedDict]]


class GetSessionHistoryMediaContainer(BaseModel):
    size: Optional[int] = None

    metadata: Annotated[
        Optional[List[GetSessionHistoryMetadata]], pydantic.Field(alias="Metadata")
    ] = None


class GetSessionHistoryResponseBodyTypedDict(TypedDict):
    r"""List of Plex Sessions"""

    media_container: NotRequired[GetSessionHistoryMediaContainerTypedDict]


class GetSessionHistoryResponseBody(BaseModel):
    r"""List of Plex Sessions"""

    media_container: Annotated[
        Optional[GetSessionHistoryMediaContainer],
        pydantic.Field(alias="MediaContainer"),
    ] = None


class GetSessionHistoryResponseTypedDict(TypedDict):
    content_type: str
    r"""HTTP response content type for this operation"""
    status_code: int
    r"""HTTP response status code for this operation"""
    raw_response: httpx.Response
    r"""Raw HTTP response; suitable for custom response parsing"""
    object: NotRequired[GetSessionHistoryResponseBodyTypedDict]
    r"""List of Plex Sessions"""


class GetSessionHistoryResponse(BaseModel):
    content_type: str
    r"""HTTP response content type for this operation"""

    status_code: int
    r"""HTTP response status code for this operation"""

    raw_response: httpx.Response
    r"""Raw HTTP response; suitable for custom response parsing"""

    object: Optional[GetSessionHistoryResponseBody] = None
    r"""List of Plex Sessions"""
