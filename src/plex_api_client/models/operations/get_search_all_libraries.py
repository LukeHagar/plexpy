"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import date
from enum import Enum
import httpx
from plex_api_client import utils
from plex_api_client.types import BaseModel
from plex_api_client.utils import (
    FieldMetadata,
    HeaderMetadata,
    QueryParamMetadata,
    validate_const,
    validate_open_enum,
)
import pydantic
from pydantic.functional_validators import AfterValidator, PlainValidator
from typing import List, Literal, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class SearchTypes(str, Enum, metaclass=utils.OpenEnumMeta):
    MOVIES = "movies"
    MUSIC = "music"
    OTHER_VIDEOS = "otherVideos"
    PEOPLE = "people"
    TV = "tv"


class GetSearchAllLibrariesQueryParamIncludeCollections(int, Enum):
    r"""Whether to include collections in the search results."""

    DISABLE = 0
    ENABLE = 1


class GetSearchAllLibrariesQueryParamIncludeExternalMedia(int, Enum):
    r"""Whether to include external media in the search results."""

    DISABLE = 0
    ENABLE = 1


class GetSearchAllLibrariesRequestTypedDict(TypedDict):
    query: str
    r"""The search query term."""
    client_id: str
    r"""An opaque identifier unique to the client (UUID, serial number, or other unique device ID)"""
    limit: NotRequired[int]
    r"""Limit the number of results returned."""
    search_types: NotRequired[List[SearchTypes]]
    r"""A comma-separated list of search types to include. Valid values are: movies, music, otherVideos, people, tv.

    """
    include_collections: NotRequired[GetSearchAllLibrariesQueryParamIncludeCollections]
    r"""Whether to include collections in the search results."""
    include_external_media: NotRequired[
        GetSearchAllLibrariesQueryParamIncludeExternalMedia
    ]
    r"""Whether to include external media in the search results."""


class GetSearchAllLibrariesRequest(BaseModel):
    query: Annotated[
        str, FieldMetadata(query=QueryParamMetadata(style="form", explode=True))
    ]
    r"""The search query term."""

    client_id: Annotated[
        str,
        pydantic.Field(alias="X-Plex-Client-Identifier"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ]
    r"""An opaque identifier unique to the client (UUID, serial number, or other unique device ID)"""

    limit: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Limit the number of results returned."""

    search_types: Annotated[
        Optional[
            List[Annotated[SearchTypes, PlainValidator(validate_open_enum(False))]]
        ],
        pydantic.Field(alias="searchTypes"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""A comma-separated list of search types to include. Valid values are: movies, music, otherVideos, people, tv.

    """

    include_collections: Annotated[
        Optional[GetSearchAllLibrariesQueryParamIncludeCollections],
        pydantic.Field(alias="includeCollections"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = GetSearchAllLibrariesQueryParamIncludeCollections.DISABLE
    r"""Whether to include collections in the search results."""

    include_external_media: Annotated[
        Optional[GetSearchAllLibrariesQueryParamIncludeExternalMedia],
        pydantic.Field(alias="includeExternalMedia"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = GetSearchAllLibrariesQueryParamIncludeExternalMedia.DISABLE
    r"""Whether to include external media in the search results."""


class GetSearchAllLibrariesDirectoryTypedDict(TypedDict):
    key: str
    r"""The unique identifier path for the search result item."""
    library_section_id: int
    r"""The identifier for the library section."""
    library_section_key: str
    r"""The key corresponding to the library section."""
    library_section_title: str
    r"""The title of the library section."""
    type: str
    r"""The type of the directory."""
    id: int
    tag: str
    library_section_type: Literal[1]
    filter_: NotRequired[str]
    r"""The filter string used to query this specific item in the library."""
    tag_type: Literal[4]
    r"""The type of tag associated with this search result (e.g., Director, Actor)."""
    tag_key: NotRequired[str]
    r"""The unique identifier for the tag associated with this search result."""
    thumb: NotRequired[str]
    r"""The URL to the thumbnail image associated with this search result."""
    count: NotRequired[int]
    r"""The number of items associated with this search result."""


class GetSearchAllLibrariesDirectory(BaseModel):
    key: str
    r"""The unique identifier path for the search result item."""

    library_section_id: Annotated[int, pydantic.Field(alias="librarySectionID")]
    r"""The identifier for the library section."""

    library_section_key: Annotated[str, pydantic.Field(alias="librarySectionKey")]
    r"""The key corresponding to the library section."""

    library_section_title: Annotated[str, pydantic.Field(alias="librarySectionTitle")]
    r"""The title of the library section."""

    type: str
    r"""The type of the directory."""

    id: int

    tag: str

    LIBRARY_SECTION_TYPE: Annotated[
        Annotated[Optional[Literal[1]], AfterValidator(validate_const(1))],
        pydantic.Field(alias="librarySectionType"),
    ] = 1

    filter_: Annotated[Optional[str], pydantic.Field(alias="filter")] = None
    r"""The filter string used to query this specific item in the library."""

    TAG_TYPE: Annotated[
        Annotated[Optional[Literal[4]], AfterValidator(validate_const(4))],
        pydantic.Field(alias="tagType"),
    ] = 4
    r"""The type of tag associated with this search result (e.g., Director, Actor)."""

    tag_key: Annotated[Optional[str], pydantic.Field(alias="tagKey")] = None
    r"""The unique identifier for the tag associated with this search result."""

    thumb: Optional[str] = None
    r"""The URL to the thumbnail image associated with this search result."""

    count: Optional[int] = None
    r"""The number of items associated with this search result."""


class GetSearchAllLibrariesType(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""The type of media content in the Plex library. This can represent videos, music, or photos."""

    MOVIE = "movie"
    TV_SHOW = "show"
    SEASON = "season"
    EPISODE = "episode"
    ARTIST = "artist"
    ALBUM = "album"
    TRACK = "track"
    PHOTO_ALBUM = "photoalbum"
    PHOTO = "photo"
    COLLECTION = "collection"


class GetSearchAllLibrariesLibraryType(str, Enum, metaclass=utils.OpenEnumMeta):
    COVER_POSTER = "coverPoster"
    BACKGROUND = "background"
    SNAPSHOT = "snapshot"
    CLEAR_LOGO = "clearLogo"


class GetSearchAllLibrariesImageTypedDict(TypedDict):
    alt: str
    type: GetSearchAllLibrariesLibraryType
    url: str


class GetSearchAllLibrariesImage(BaseModel):
    alt: str

    type: Annotated[
        GetSearchAllLibrariesLibraryType, PlainValidator(validate_open_enum(False))
    ]

    url: str


class GetSearchAllLibrariesUltraBlurColorsTypedDict(TypedDict):
    top_left: str
    top_right: str
    bottom_right: str
    bottom_left: str


class GetSearchAllLibrariesUltraBlurColors(BaseModel):
    top_left: Annotated[str, pydantic.Field(alias="topLeft")]

    top_right: Annotated[str, pydantic.Field(alias="topRight")]

    bottom_right: Annotated[str, pydantic.Field(alias="bottomRight")]

    bottom_left: Annotated[str, pydantic.Field(alias="bottomLeft")]


class GetSearchAllLibrariesGuidsTypedDict(TypedDict):
    id: str
    r"""The unique identifier for the Guid. Can be prefixed with imdb://, tmdb://, tvdb://

    """


class GetSearchAllLibrariesGuids(BaseModel):
    id: str
    r"""The unique identifier for the Guid. Can be prefixed with imdb://, tmdb://, tvdb://

    """


class GetSearchAllLibrariesShowOrdering(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Setting that indicates the episode ordering for the show.
    Options:
    - None = Library default
    - tmdbAiring = The Movie Database (Aired)
    - aired = TheTVDB (Aired)
    - dvd = TheTVDB (DVD)
    - absolute = TheTVDB (Absolute)

    """

    NONE = "None"
    TMDB_AIRING = "tmdbAiring"
    TVDB_AIRED = "aired"
    TVDB_DVD = "dvd"
    TVDB_ABSOLUTE = "absolute"


class GetSearchAllLibrariesFlattenSeasons(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Setting that indicates if seasons are set to hidden for the show. (-1 = Library default, 0 = Hide, 1 = Show)."""

    LIBRARY_DEFAULT = "-1"
    HIDE = "0"
    SHOW = "1"


class GetSearchAllLibrariesOptimizedForStreaming1(int, Enum):
    ZERO = 0
    ONE = 1


GetSearchAllLibrariesOptimizedForStreamingTypedDict = TypeAliasType(
    "GetSearchAllLibrariesOptimizedForStreamingTypedDict",
    Union[GetSearchAllLibrariesOptimizedForStreaming1, bool],
)
r"""Has this media been optimized for streaming. NOTE: This can be 0, 1, false or true"""


GetSearchAllLibrariesOptimizedForStreaming = TypeAliasType(
    "GetSearchAllLibrariesOptimizedForStreaming",
    Union[GetSearchAllLibrariesOptimizedForStreaming1, bool],
)
r"""Has this media been optimized for streaming. NOTE: This can be 0, 1, false or true"""


class GetSearchAllLibrariesOptimizedForStreamingLibrary1(int, Enum):
    ZERO = 0
    ONE = 1


GetSearchAllLibrariesLibraryOptimizedForStreamingTypedDict = TypeAliasType(
    "GetSearchAllLibrariesLibraryOptimizedForStreamingTypedDict",
    Union[GetSearchAllLibrariesOptimizedForStreamingLibrary1, bool],
)
r"""Has this media been optimized for streaming. NOTE: This can be 0, 1, false or true

"""


GetSearchAllLibrariesLibraryOptimizedForStreaming = TypeAliasType(
    "GetSearchAllLibrariesLibraryOptimizedForStreaming",
    Union[GetSearchAllLibrariesOptimizedForStreamingLibrary1, bool],
)
r"""Has this media been optimized for streaming. NOTE: This can be 0, 1, false or true

"""


class GetSearchAllLibrariesHasThumbnail(str, Enum):
    r"""Indicates if the part has a thumbnail."""

    FALSE = "0"
    TRUE = "1"


class GetSearchAllLibrariesPartTypedDict(TypedDict):
    id: int
    r"""Unique part identifier."""
    accessible: NotRequired[bool]
    r"""Indicates if the part is accessible."""
    exists: NotRequired[bool]
    r"""Indicates if the part exists."""
    key: NotRequired[str]
    r"""Key to access this part."""
    indexes: NotRequired[str]
    duration: NotRequired[int]
    r"""Duration of the part in milliseconds."""
    file: NotRequired[str]
    r"""File path for the part."""
    size: NotRequired[int]
    r"""File size in bytes."""
    packet_length: NotRequired[int]
    container: NotRequired[str]
    r"""Container format of the part."""
    video_profile: NotRequired[str]
    r"""Video profile for the part."""
    audio_profile: NotRequired[str]
    r"""The audio profile used for the media (e.g., DTS, Dolby Digital, etc.)."""
    has64bit_offsets: NotRequired[bool]
    optimized_for_streaming: NotRequired[
        GetSearchAllLibrariesLibraryOptimizedForStreamingTypedDict
    ]
    r"""Has this media been optimized for streaming. NOTE: This can be 0, 1, false or true

    """
    has_thumbnail: NotRequired[GetSearchAllLibrariesHasThumbnail]


class GetSearchAllLibrariesPart(BaseModel):
    id: int
    r"""Unique part identifier."""

    accessible: Optional[bool] = None
    r"""Indicates if the part is accessible."""

    exists: Optional[bool] = None
    r"""Indicates if the part exists."""

    key: Optional[str] = None
    r"""Key to access this part."""

    indexes: Optional[str] = None

    duration: Optional[int] = None
    r"""Duration of the part in milliseconds."""

    file: Optional[str] = None
    r"""File path for the part."""

    size: Optional[int] = None
    r"""File size in bytes."""

    packet_length: Annotated[Optional[int], pydantic.Field(alias="packetLength")] = None

    container: Optional[str] = None
    r"""Container format of the part."""

    video_profile: Annotated[Optional[str], pydantic.Field(alias="videoProfile")] = None
    r"""Video profile for the part."""

    audio_profile: Annotated[Optional[str], pydantic.Field(alias="audioProfile")] = None
    r"""The audio profile used for the media (e.g., DTS, Dolby Digital, etc.)."""

    has64bit_offsets: Annotated[
        Optional[bool], pydantic.Field(alias="has64bitOffsets")
    ] = None

    optimized_for_streaming: Annotated[
        Optional[GetSearchAllLibrariesLibraryOptimizedForStreaming],
        pydantic.Field(alias="optimizedForStreaming"),
    ] = None
    r"""Has this media been optimized for streaming. NOTE: This can be 0, 1, false or true

    """

    has_thumbnail: Annotated[
        Optional[GetSearchAllLibrariesHasThumbnail],
        pydantic.Field(alias="hasThumbnail"),
    ] = GetSearchAllLibrariesHasThumbnail.FALSE


class GetSearchAllLibrariesMediaTypedDict(TypedDict):
    id: int
    r"""Unique media identifier."""
    duration: NotRequired[int]
    r"""Duration of the media in milliseconds."""
    bitrate: NotRequired[int]
    r"""Bitrate in bits per second."""
    width: NotRequired[int]
    r"""Video width in pixels."""
    height: NotRequired[int]
    r"""Video height in pixels."""
    aspect_ratio: NotRequired[float]
    r"""Aspect ratio of the video."""
    audio_channels: NotRequired[int]
    r"""Number of audio channels."""
    display_offset: NotRequired[int]
    audio_codec: NotRequired[str]
    r"""Audio codec used."""
    video_codec: NotRequired[str]
    r"""Video codec used."""
    video_resolution: NotRequired[str]
    r"""Video resolution (e.g., 4k)."""
    container: NotRequired[str]
    r"""Container format of the media."""
    video_frame_rate: NotRequired[str]
    r"""Frame rate of the video. Values found include NTSC, PAL, 24p

    """
    video_profile: NotRequired[str]
    r"""Video profile (e.g., main 10)."""
    has_voice_activity: NotRequired[bool]
    r"""Indicates whether voice activity is detected."""
    audio_profile: NotRequired[str]
    r"""The audio profile used for the media (e.g., DTS, Dolby Digital, etc.)."""
    optimized_for_streaming: NotRequired[
        GetSearchAllLibrariesOptimizedForStreamingTypedDict
    ]
    r"""Has this media been optimized for streaming. NOTE: This can be 0, 1, false or true"""
    has64bit_offsets: NotRequired[bool]
    r"""Indicates whether the media has 64-bit offsets.
    This is relevant for media files that may require larger offsets than what 32-bit integers can provide.

    """
    part: NotRequired[List[GetSearchAllLibrariesPartTypedDict]]


class GetSearchAllLibrariesMedia(BaseModel):
    id: int
    r"""Unique media identifier."""

    duration: Optional[int] = None
    r"""Duration of the media in milliseconds."""

    bitrate: Optional[int] = None
    r"""Bitrate in bits per second."""

    width: Optional[int] = None
    r"""Video width in pixels."""

    height: Optional[int] = None
    r"""Video height in pixels."""

    aspect_ratio: Annotated[Optional[float], pydantic.Field(alias="aspectRatio")] = None
    r"""Aspect ratio of the video."""

    audio_channels: Annotated[Optional[int], pydantic.Field(alias="audioChannels")] = (
        None
    )
    r"""Number of audio channels."""

    display_offset: Annotated[Optional[int], pydantic.Field(alias="displayOffset")] = (
        None
    )

    audio_codec: Annotated[Optional[str], pydantic.Field(alias="audioCodec")] = None
    r"""Audio codec used."""

    video_codec: Annotated[Optional[str], pydantic.Field(alias="videoCodec")] = None
    r"""Video codec used."""

    video_resolution: Annotated[
        Optional[str], pydantic.Field(alias="videoResolution")
    ] = None
    r"""Video resolution (e.g., 4k)."""

    container: Optional[str] = None
    r"""Container format of the media."""

    video_frame_rate: Annotated[
        Optional[str], pydantic.Field(alias="videoFrameRate")
    ] = None
    r"""Frame rate of the video. Values found include NTSC, PAL, 24p

    """

    video_profile: Annotated[Optional[str], pydantic.Field(alias="videoProfile")] = None
    r"""Video profile (e.g., main 10)."""

    has_voice_activity: Annotated[
        Optional[bool], pydantic.Field(alias="hasVoiceActivity")
    ] = None
    r"""Indicates whether voice activity is detected."""

    audio_profile: Annotated[Optional[str], pydantic.Field(alias="audioProfile")] = None
    r"""The audio profile used for the media (e.g., DTS, Dolby Digital, etc.)."""

    optimized_for_streaming: Annotated[
        Optional[GetSearchAllLibrariesOptimizedForStreaming],
        pydantic.Field(alias="optimizedForStreaming"),
    ] = None
    r"""Has this media been optimized for streaming. NOTE: This can be 0, 1, false or true"""

    has64bit_offsets: Annotated[
        Optional[bool], pydantic.Field(alias="has64bitOffsets")
    ] = None
    r"""Indicates whether the media has 64-bit offsets.
    This is relevant for media files that may require larger offsets than what 32-bit integers can provide.

    """

    part: Annotated[
        Optional[List[GetSearchAllLibrariesPart]], pydantic.Field(alias="Part")
    ] = None


class GetSearchAllLibrariesGenreTypedDict(TypedDict):
    id: int
    r"""The unique identifier for the genre.
    NOTE: This is different for each Plex server and is not globally unique.

    """
    tag: str
    r"""The genre name of this media-item

    """


class GetSearchAllLibrariesGenre(BaseModel):
    id: int
    r"""The unique identifier for the genre.
    NOTE: This is different for each Plex server and is not globally unique.

    """

    tag: str
    r"""The genre name of this media-item

    """


class GetSearchAllLibrariesCountryTypedDict(TypedDict):
    id: int
    r"""The unique identifier for the country.
    NOTE: This is different for each Plex server and is not globally unique.

    """
    tag: str
    r"""The country of origin of this media item"""


class GetSearchAllLibrariesCountry(BaseModel):
    id: int
    r"""The unique identifier for the country.
    NOTE: This is different for each Plex server and is not globally unique.

    """

    tag: str
    r"""The country of origin of this media item"""


class GetSearchAllLibrariesDirectorTypedDict(TypedDict):
    id: int
    r"""Unique identifier for the director."""
    tag: str
    r"""The role of Director"""
    thumb: NotRequired[str]
    r"""The absolute URL of the thumbnail image for the director."""


class GetSearchAllLibrariesDirector(BaseModel):
    id: int
    r"""Unique identifier for the director."""

    tag: str
    r"""The role of Director"""

    thumb: Optional[str] = None
    r"""The absolute URL of the thumbnail image for the director."""


class GetSearchAllLibrariesWriterTypedDict(TypedDict):
    id: int
    r"""Unique identifier for the writer."""
    tag: str
    r"""The role of Writer"""
    thumb: NotRequired[str]
    r"""The absolute URL of the thumbnail image for the writer."""


class GetSearchAllLibrariesWriter(BaseModel):
    id: int
    r"""Unique identifier for the writer."""

    tag: str
    r"""The role of Writer"""

    thumb: Optional[str] = None
    r"""The absolute URL of the thumbnail image for the writer."""


class GetSearchAllLibrariesRoleTypedDict(TypedDict):
    id: int
    r"""The unique identifier for the role.
    NOTE: This is different for each Plex server and is not globally unique.

    """
    tag: str
    r"""The display tag for the actor (typically the actor's name)."""
    role: NotRequired[str]
    r"""The role played by the actor in the media item."""
    thumb: NotRequired[str]
    r"""The absolute URL of the thumbnail image for the actor."""


class GetSearchAllLibrariesRole(BaseModel):
    id: int
    r"""The unique identifier for the role.
    NOTE: This is different for each Plex server and is not globally unique.

    """

    tag: str
    r"""The display tag for the actor (typically the actor's name)."""

    role: Optional[str] = None
    r"""The role played by the actor in the media item."""

    thumb: Optional[str] = None
    r"""The absolute URL of the thumbnail image for the actor."""


class GetSearchAllLibrariesLocationTypedDict(TypedDict):
    r"""The folder path for the media item."""

    path: str


class GetSearchAllLibrariesLocation(BaseModel):
    r"""The folder path for the media item."""

    path: str


class GetSearchAllLibrariesMetadataTypedDict(TypedDict):
    r"""Unknown"""

    rating_key: str
    r"""The rating key (Media ID) of this media item. Note: Although this is always an integer, it is represented as a string in the API."""
    key: str
    r"""The unique key for the media item."""
    guid: str
    r"""The globally unique identifier for the media item."""
    slug: str
    r"""A URL‐friendly version of the media title."""
    type: GetSearchAllLibrariesType
    title: str
    r"""The title of the media item."""
    banner: str
    r"""The banner image URL for the media item."""
    title_sort: str
    r"""The sort title used for ordering media items."""
    summary: str
    r"""A synopsis of the media item."""
    rating: float
    r"""The critic rating for the media item."""
    audience_rating: float
    r"""The audience rating for the media item."""
    tagline: str
    r"""A brief tagline for the media item."""
    thumb: str
    r"""The thumbnail image URL for the media item."""
    art: str
    r"""The art image URL for the media item."""
    theme: str
    r"""The theme URL for the media item."""
    index: int
    r"""The index position of the media item."""
    child_count: int
    r"""The number of child items associated with this media item."""
    season_count: int
    r"""The total number of seasons (for TV shows)."""
    duration: int
    r"""The duration of the media item in milliseconds."""
    added_at: int
    studio: NotRequired[str]
    r"""The studio that produced the media item."""
    content_rating: NotRequired[str]
    r"""The content rating for the media item."""
    year: NotRequired[int]
    r"""The release year of the media item."""
    leaf_count: NotRequired[int]
    r"""The number of leaf items (end nodes) under this media item."""
    viewed_leaf_count: NotRequired[int]
    r"""The number of leaf items that have been viewed."""
    originally_available_at: NotRequired[date]
    r"""The original release date of the media item."""
    updated_at: NotRequired[int]
    r"""Unix epoch datetime in seconds"""
    parent_year: NotRequired[int]
    r"""The release year of the parent media item."""
    audience_rating_image: NotRequired[str]
    r"""The URL for the audience rating image."""
    chapter_source: NotRequired[str]
    r"""The source from which chapter data is derived."""
    primary_extra_key: NotRequired[str]
    r"""The primary extra key associated with this media item."""
    original_title: NotRequired[str]
    r"""The original title of the media item (if different)."""
    parent_rating_key: NotRequired[str]
    r"""The rating key of the parent media item."""
    grandparent_rating_key: NotRequired[str]
    r"""The rating key of the grandparent media item."""
    parent_guid: NotRequired[str]
    r"""The GUID of the parent media item."""
    grandparent_guid: NotRequired[str]
    r"""The GUID of the grandparent media item."""
    grandparent_slug: NotRequired[str]
    r"""The slug for the grandparent media item."""
    grandparent_key: NotRequired[str]
    r"""The key of the grandparent media item."""
    parent_key: NotRequired[str]
    r"""The key of the parent media item."""
    grandparent_title: NotRequired[str]
    r"""The title of the grandparent media item."""
    grandparent_thumb: NotRequired[str]
    r"""The thumbnail URL for the grandparent media item."""
    grandparent_theme: NotRequired[str]
    r"""The theme URL for the grandparent media item."""
    grandparent_art: NotRequired[str]
    r"""The art URL for the grandparent media item."""
    parent_title: NotRequired[str]
    r"""The title of the parent media item."""
    parent_index: NotRequired[int]
    r"""The index position of the parent media item."""
    parent_thumb: NotRequired[str]
    r"""The thumbnail URL for the parent media item."""
    rating_image: NotRequired[str]
    r"""The URL for the rating image."""
    view_count: NotRequired[int]
    r"""The number of times this media item has been viewed."""
    view_offset: NotRequired[int]
    r"""The current playback offset (in milliseconds)."""
    skip_count: NotRequired[int]
    r"""The number of times this media item has been skipped."""
    subtype: NotRequired[str]
    r"""A classification that further describes the type of media item. For example, 'clip' indicates that the item is a short video clip."""
    last_rated_at: NotRequired[int]
    r"""The Unix timestamp representing the last time the item was rated."""
    created_at_accuracy: NotRequired[str]
    r"""The accuracy of the creation timestamp. This value indicates the format(s) provided (for example, 'epoch,local' means both epoch and local time formats are available)."""
    created_at_tz_offset: NotRequired[str]
    r"""The time zone offset for the creation timestamp, represented as a string. This offset indicates the difference from UTC."""
    last_viewed_at: NotRequired[int]
    r"""Unix timestamp for when the media item was last viewed."""
    user_rating: NotRequired[float]
    r"""The rating provided by a user for the item. This value is expressed as a decimal number."""
    image: NotRequired[List[GetSearchAllLibrariesImageTypedDict]]
    ultra_blur_colors: NotRequired[GetSearchAllLibrariesUltraBlurColorsTypedDict]
    guids: NotRequired[List[GetSearchAllLibrariesGuidsTypedDict]]
    library_section_id: NotRequired[int]
    r"""The identifier for the library section."""
    library_section_title: NotRequired[str]
    r"""The title of the library section."""
    library_section_key: NotRequired[str]
    r"""The key corresponding to the library section."""
    show_ordering: NotRequired[GetSearchAllLibrariesShowOrdering]
    r"""Setting that indicates the episode ordering for the show.
    Options:
    - None = Library default
    - tmdbAiring = The Movie Database (Aired)
    - aired = TheTVDB (Aired)
    - dvd = TheTVDB (DVD)
    - absolute = TheTVDB (Absolute)

    """
    flatten_seasons: NotRequired[GetSearchAllLibrariesFlattenSeasons]
    r"""Setting that indicates if seasons are set to hidden for the show. (-1 = Library default, 0 = Hide, 1 = Show).

    """
    skip_children: NotRequired[bool]
    r"""Indicates whether child items should be skipped."""
    media: NotRequired[List[GetSearchAllLibrariesMediaTypedDict]]
    genre: NotRequired[List[GetSearchAllLibrariesGenreTypedDict]]
    country: NotRequired[List[GetSearchAllLibrariesCountryTypedDict]]
    director: NotRequired[List[GetSearchAllLibrariesDirectorTypedDict]]
    writer: NotRequired[List[GetSearchAllLibrariesWriterTypedDict]]
    role: NotRequired[List[GetSearchAllLibrariesRoleTypedDict]]
    location: NotRequired[List[GetSearchAllLibrariesLocationTypedDict]]


class GetSearchAllLibrariesMetadata(BaseModel):
    r"""Unknown"""

    rating_key: Annotated[str, pydantic.Field(alias="ratingKey")]
    r"""The rating key (Media ID) of this media item. Note: Although this is always an integer, it is represented as a string in the API."""

    key: str
    r"""The unique key for the media item."""

    guid: str
    r"""The globally unique identifier for the media item."""

    slug: str
    r"""A URL‐friendly version of the media title."""

    type: Annotated[
        GetSearchAllLibrariesType, PlainValidator(validate_open_enum(False))
    ]

    title: str
    r"""The title of the media item."""

    banner: str
    r"""The banner image URL for the media item."""

    title_sort: Annotated[str, pydantic.Field(alias="titleSort")]
    r"""The sort title used for ordering media items."""

    summary: str
    r"""A synopsis of the media item."""

    rating: float
    r"""The critic rating for the media item."""

    audience_rating: Annotated[float, pydantic.Field(alias="audienceRating")]
    r"""The audience rating for the media item."""

    tagline: str
    r"""A brief tagline for the media item."""

    thumb: str
    r"""The thumbnail image URL for the media item."""

    art: str
    r"""The art image URL for the media item."""

    theme: str
    r"""The theme URL for the media item."""

    index: int
    r"""The index position of the media item."""

    child_count: Annotated[int, pydantic.Field(alias="childCount")]
    r"""The number of child items associated with this media item."""

    season_count: Annotated[int, pydantic.Field(alias="seasonCount")]
    r"""The total number of seasons (for TV shows)."""

    duration: int
    r"""The duration of the media item in milliseconds."""

    added_at: Annotated[int, pydantic.Field(alias="addedAt")]

    studio: Optional[str] = None
    r"""The studio that produced the media item."""

    content_rating: Annotated[Optional[str], pydantic.Field(alias="contentRating")] = (
        None
    )
    r"""The content rating for the media item."""

    year: Optional[int] = None
    r"""The release year of the media item."""

    leaf_count: Annotated[Optional[int], pydantic.Field(alias="leafCount")] = None
    r"""The number of leaf items (end nodes) under this media item."""

    viewed_leaf_count: Annotated[
        Optional[int], pydantic.Field(alias="viewedLeafCount")
    ] = None
    r"""The number of leaf items that have been viewed."""

    originally_available_at: Annotated[
        Optional[date], pydantic.Field(alias="originallyAvailableAt")
    ] = None
    r"""The original release date of the media item."""

    updated_at: Annotated[Optional[int], pydantic.Field(alias="updatedAt")] = None
    r"""Unix epoch datetime in seconds"""

    parent_year: Annotated[Optional[int], pydantic.Field(alias="parentYear")] = None
    r"""The release year of the parent media item."""

    audience_rating_image: Annotated[
        Optional[str], pydantic.Field(alias="audienceRatingImage")
    ] = None
    r"""The URL for the audience rating image."""

    chapter_source: Annotated[Optional[str], pydantic.Field(alias="chapterSource")] = (
        None
    )
    r"""The source from which chapter data is derived."""

    primary_extra_key: Annotated[
        Optional[str], pydantic.Field(alias="primaryExtraKey")
    ] = None
    r"""The primary extra key associated with this media item."""

    original_title: Annotated[Optional[str], pydantic.Field(alias="originalTitle")] = (
        None
    )
    r"""The original title of the media item (if different)."""

    parent_rating_key: Annotated[
        Optional[str], pydantic.Field(alias="parentRatingKey")
    ] = None
    r"""The rating key of the parent media item."""

    grandparent_rating_key: Annotated[
        Optional[str], pydantic.Field(alias="grandparentRatingKey")
    ] = None
    r"""The rating key of the grandparent media item."""

    parent_guid: Annotated[Optional[str], pydantic.Field(alias="parentGuid")] = None
    r"""The GUID of the parent media item."""

    grandparent_guid: Annotated[
        Optional[str], pydantic.Field(alias="grandparentGuid")
    ] = None
    r"""The GUID of the grandparent media item."""

    grandparent_slug: Annotated[
        Optional[str], pydantic.Field(alias="grandparentSlug")
    ] = None
    r"""The slug for the grandparent media item."""

    grandparent_key: Annotated[
        Optional[str], pydantic.Field(alias="grandparentKey")
    ] = None
    r"""The key of the grandparent media item."""

    parent_key: Annotated[Optional[str], pydantic.Field(alias="parentKey")] = None
    r"""The key of the parent media item."""

    grandparent_title: Annotated[
        Optional[str], pydantic.Field(alias="grandparentTitle")
    ] = None
    r"""The title of the grandparent media item."""

    grandparent_thumb: Annotated[
        Optional[str], pydantic.Field(alias="grandparentThumb")
    ] = None
    r"""The thumbnail URL for the grandparent media item."""

    grandparent_theme: Annotated[
        Optional[str], pydantic.Field(alias="grandparentTheme")
    ] = None
    r"""The theme URL for the grandparent media item."""

    grandparent_art: Annotated[
        Optional[str], pydantic.Field(alias="grandparentArt")
    ] = None
    r"""The art URL for the grandparent media item."""

    parent_title: Annotated[Optional[str], pydantic.Field(alias="parentTitle")] = None
    r"""The title of the parent media item."""

    parent_index: Annotated[Optional[int], pydantic.Field(alias="parentIndex")] = None
    r"""The index position of the parent media item."""

    parent_thumb: Annotated[Optional[str], pydantic.Field(alias="parentThumb")] = None
    r"""The thumbnail URL for the parent media item."""

    rating_image: Annotated[Optional[str], pydantic.Field(alias="ratingImage")] = None
    r"""The URL for the rating image."""

    view_count: Annotated[Optional[int], pydantic.Field(alias="viewCount")] = None
    r"""The number of times this media item has been viewed."""

    view_offset: Annotated[Optional[int], pydantic.Field(alias="viewOffset")] = None
    r"""The current playback offset (in milliseconds)."""

    skip_count: Annotated[Optional[int], pydantic.Field(alias="skipCount")] = None
    r"""The number of times this media item has been skipped."""

    subtype: Optional[str] = None
    r"""A classification that further describes the type of media item. For example, 'clip' indicates that the item is a short video clip."""

    last_rated_at: Annotated[Optional[int], pydantic.Field(alias="lastRatedAt")] = None
    r"""The Unix timestamp representing the last time the item was rated."""

    created_at_accuracy: Annotated[
        Optional[str], pydantic.Field(alias="createdAtAccuracy")
    ] = None
    r"""The accuracy of the creation timestamp. This value indicates the format(s) provided (for example, 'epoch,local' means both epoch and local time formats are available)."""

    created_at_tz_offset: Annotated[
        Optional[str], pydantic.Field(alias="createdAtTZOffset")
    ] = None
    r"""The time zone offset for the creation timestamp, represented as a string. This offset indicates the difference from UTC."""

    last_viewed_at: Annotated[Optional[int], pydantic.Field(alias="lastViewedAt")] = (
        None
    )
    r"""Unix timestamp for when the media item was last viewed."""

    user_rating: Annotated[Optional[float], pydantic.Field(alias="userRating")] = None
    r"""The rating provided by a user for the item. This value is expressed as a decimal number."""

    image: Annotated[
        Optional[List[GetSearchAllLibrariesImage]], pydantic.Field(alias="Image")
    ] = None

    ultra_blur_colors: Annotated[
        Optional[GetSearchAllLibrariesUltraBlurColors],
        pydantic.Field(alias="UltraBlurColors"),
    ] = None

    guids: Annotated[
        Optional[List[GetSearchAllLibrariesGuids]], pydantic.Field(alias="Guid")
    ] = None

    library_section_id: Annotated[
        Optional[int], pydantic.Field(alias="librarySectionID")
    ] = None
    r"""The identifier for the library section."""

    library_section_title: Annotated[
        Optional[str], pydantic.Field(alias="librarySectionTitle")
    ] = None
    r"""The title of the library section."""

    library_section_key: Annotated[
        Optional[str], pydantic.Field(alias="librarySectionKey")
    ] = None
    r"""The key corresponding to the library section."""

    show_ordering: Annotated[
        Annotated[
            Optional[GetSearchAllLibrariesShowOrdering],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="showOrdering"),
    ] = None
    r"""Setting that indicates the episode ordering for the show.
    Options:
    - None = Library default
    - tmdbAiring = The Movie Database (Aired)
    - aired = TheTVDB (Aired)
    - dvd = TheTVDB (DVD)
    - absolute = TheTVDB (Absolute)

    """

    flatten_seasons: Annotated[
        Annotated[
            Optional[GetSearchAllLibrariesFlattenSeasons],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="flattenSeasons"),
    ] = None
    r"""Setting that indicates if seasons are set to hidden for the show. (-1 = Library default, 0 = Hide, 1 = Show).

    """

    skip_children: Annotated[Optional[bool], pydantic.Field(alias="skipChildren")] = (
        None
    )
    r"""Indicates whether child items should be skipped."""

    media: Annotated[
        Optional[List[GetSearchAllLibrariesMedia]], pydantic.Field(alias="Media")
    ] = None

    genre: Annotated[
        Optional[List[GetSearchAllLibrariesGenre]], pydantic.Field(alias="Genre")
    ] = None

    country: Annotated[
        Optional[List[GetSearchAllLibrariesCountry]], pydantic.Field(alias="Country")
    ] = None

    director: Annotated[
        Optional[List[GetSearchAllLibrariesDirector]], pydantic.Field(alias="Director")
    ] = None

    writer: Annotated[
        Optional[List[GetSearchAllLibrariesWriter]], pydantic.Field(alias="Writer")
    ] = None

    role: Annotated[
        Optional[List[GetSearchAllLibrariesRole]], pydantic.Field(alias="Role")
    ] = None

    location: Annotated[
        Optional[List[GetSearchAllLibrariesLocation]], pydantic.Field(alias="Location")
    ] = None


class SearchResultTypedDict(TypedDict):
    score: float
    r"""The score of the search result, typically a float value between 0 and 1."""
    directory: NotRequired[GetSearchAllLibrariesDirectoryTypedDict]
    metadata: NotRequired[GetSearchAllLibrariesMetadataTypedDict]


class SearchResult(BaseModel):
    score: float
    r"""The score of the search result, typically a float value between 0 and 1."""

    directory: Annotated[
        Optional[GetSearchAllLibrariesDirectory], pydantic.Field(alias="Directory")
    ] = None

    metadata: Annotated[
        Optional[GetSearchAllLibrariesMetadata], pydantic.Field(alias="Metadata")
    ] = None


class GetSearchAllLibrariesMediaContainerTypedDict(TypedDict):
    size: int
    r"""Number of media items returned in this response."""
    allow_sync: bool
    r"""Indicates whether syncing is allowed."""
    identifier: str
    r"""An plugin identifier for the media container."""
    media_tag_prefix: str
    r"""The prefix used for media tag resource paths."""
    media_tag_version: int
    r"""The version number for media tags."""
    search_result: List[SearchResultTypedDict]
    library_section_id: NotRequired[int]
    r"""The unique identifier for the library section."""
    library_section_title: NotRequired[str]
    r"""The title of the library section."""
    library_section_uuid: NotRequired[str]
    r"""The universally unique identifier for the library section."""


class GetSearchAllLibrariesMediaContainer(BaseModel):
    size: int
    r"""Number of media items returned in this response."""

    allow_sync: Annotated[bool, pydantic.Field(alias="allowSync")]
    r"""Indicates whether syncing is allowed."""

    identifier: str
    r"""An plugin identifier for the media container."""

    media_tag_prefix: Annotated[str, pydantic.Field(alias="mediaTagPrefix")]
    r"""The prefix used for media tag resource paths."""

    media_tag_version: Annotated[int, pydantic.Field(alias="mediaTagVersion")]
    r"""The version number for media tags."""

    search_result: Annotated[List[SearchResult], pydantic.Field(alias="SearchResult")]

    library_section_id: Annotated[
        Optional[int], pydantic.Field(alias="librarySectionID")
    ] = None
    r"""The unique identifier for the library section."""

    library_section_title: Annotated[
        Optional[str], pydantic.Field(alias="librarySectionTitle")
    ] = None
    r"""The title of the library section."""

    library_section_uuid: Annotated[
        Optional[str], pydantic.Field(alias="librarySectionUUID")
    ] = None
    r"""The universally unique identifier for the library section."""


class GetSearchAllLibrariesResponseBodyTypedDict(TypedDict):
    r"""The libraries available on the Server"""

    media_container: GetSearchAllLibrariesMediaContainerTypedDict


class GetSearchAllLibrariesResponseBody(BaseModel):
    r"""The libraries available on the Server"""

    media_container: Annotated[
        GetSearchAllLibrariesMediaContainer, pydantic.Field(alias="MediaContainer")
    ]


class GetSearchAllLibrariesResponseTypedDict(TypedDict):
    content_type: str
    r"""HTTP response content type for this operation"""
    status_code: int
    r"""HTTP response status code for this operation"""
    raw_response: httpx.Response
    r"""Raw HTTP response; suitable for custom response parsing"""
    object: NotRequired[GetSearchAllLibrariesResponseBodyTypedDict]
    r"""The libraries available on the Server"""


class GetSearchAllLibrariesResponse(BaseModel):
    content_type: str
    r"""HTTP response content type for this operation"""

    status_code: int
    r"""HTTP response status code for this operation"""

    raw_response: httpx.Response
    r"""Raw HTTP response; suitable for custom response parsing"""

    object: Optional[GetSearchAllLibrariesResponseBody] = None
    r"""The libraries available on the Server"""
