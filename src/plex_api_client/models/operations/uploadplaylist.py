"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
import httpx
from plex_api_client.types import BaseModel
from plex_api_client.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing_extensions import Annotated, TypedDict


class QueryParamForce(int, Enum):
    r"""Force overwriting of duplicate playlists.
    By default, a playlist file uploaded with the same path will overwrite the existing playlist.
    The `force` argument is used to disable overwriting.
    If the `force` argument is set to 0, a new playlist will be created suffixed with the date and time that the duplicate was uploaded.

    """

    ZERO = 0
    ONE = 1


class UploadPlaylistRequestTypedDict(TypedDict):
    path: str
    r"""absolute path to a directory on the server where m3u files are stored, or the absolute path to a playlist file on the server.
    If the `path` argument is a directory, that path will be scanned for playlist files to be processed.
    Each file in that directory creates a separate playlist, with a name based on the filename of the file that created it.
    The GUID of each playlist is based on the filename.
    If the `path` argument is a file, that file will be used to create a new playlist, with the name based on the filename of the file that created it.
    The GUID of each playlist is based on the filename.

    """
    force: QueryParamForce
    r"""Force overwriting of duplicate playlists.
    By default, a playlist file uploaded with the same path will overwrite the existing playlist.
    The `force` argument is used to disable overwriting.
    If the `force` argument is set to 0, a new playlist will be created suffixed with the date and time that the duplicate was uploaded.

    """
    section_id: int
    r"""Possibly the section ID to upload the playlist to, we are not certain."""


class UploadPlaylistRequest(BaseModel):
    path: Annotated[
        str, FieldMetadata(query=QueryParamMetadata(style="form", explode=True))
    ]
    r"""absolute path to a directory on the server where m3u files are stored, or the absolute path to a playlist file on the server.
    If the `path` argument is a directory, that path will be scanned for playlist files to be processed.
    Each file in that directory creates a separate playlist, with a name based on the filename of the file that created it.
    The GUID of each playlist is based on the filename.
    If the `path` argument is a file, that file will be used to create a new playlist, with the name based on the filename of the file that created it.
    The GUID of each playlist is based on the filename.

    """

    force: Annotated[
        QueryParamForce,
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]
    r"""Force overwriting of duplicate playlists.
    By default, a playlist file uploaded with the same path will overwrite the existing playlist.
    The `force` argument is used to disable overwriting.
    If the `force` argument is set to 0, a new playlist will be created suffixed with the date and time that the duplicate was uploaded.

    """

    section_id: Annotated[
        int,
        pydantic.Field(alias="sectionID"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 1
    r"""Possibly the section ID to upload the playlist to, we are not certain."""


class UploadPlaylistResponseTypedDict(TypedDict):
    content_type: str
    r"""HTTP response content type for this operation"""
    status_code: int
    r"""HTTP response status code for this operation"""
    raw_response: httpx.Response
    r"""Raw HTTP response; suitable for custom response parsing"""


class UploadPlaylistResponse(BaseModel):
    content_type: str
    r"""HTTP response content type for this operation"""

    status_code: int
    r"""HTTP response status code for this operation"""

    raw_response: httpx.Response
    r"""Raw HTTP response; suitable for custom response parsing"""
