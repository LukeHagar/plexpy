"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import httpx
from plex_api_client.types import BaseModel
from plex_api_client.utils import (
    FieldMetadata,
    HeaderMetadata,
    PathParamMetadata,
    QueryParamMetadata,
)
import pydantic
from typing import Dict, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetThumbImageRequestTypedDict(TypedDict):
    rating_key: int
    r"""the id of the library item to return the children of."""
    width: int
    height: int
    min_size: int
    upscale: int
    x_plex_token: str
    r"""An authentication token, obtained from plex.tv"""


class GetThumbImageRequest(BaseModel):
    rating_key: Annotated[
        int,
        pydantic.Field(alias="ratingKey"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""the id of the library item to return the children of."""

    width: Annotated[
        int, FieldMetadata(query=QueryParamMetadata(style="form", explode=True))
    ]

    height: Annotated[
        int, FieldMetadata(query=QueryParamMetadata(style="form", explode=True))
    ]

    min_size: Annotated[
        int,
        pydantic.Field(alias="minSize"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]

    upscale: Annotated[
        int, FieldMetadata(query=QueryParamMetadata(style="form", explode=True))
    ]

    x_plex_token: Annotated[
        str,
        pydantic.Field(alias="X-Plex-Token"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ]
    r"""An authentication token, obtained from plex.tv"""


class GetThumbImageResponseTypedDict(TypedDict):
    content_type: str
    r"""HTTP response content type for this operation"""
    status_code: int
    r"""HTTP response status code for this operation"""
    raw_response: httpx.Response
    r"""Raw HTTP response; suitable for custom response parsing"""
    headers: Dict[str, List[str]]
    response_stream: NotRequired[httpx.Response]
    r"""Successful response returning an image"""


class GetThumbImageResponse(BaseModel):
    content_type: str
    r"""HTTP response content type for this operation"""

    status_code: int
    r"""HTTP response status code for this operation"""

    raw_response: httpx.Response
    r"""Raw HTTP response; suitable for custom response parsing"""

    headers: Dict[str, List[str]]

    response_stream: Optional[httpx.Response] = None
    r"""Successful response returning an image"""
