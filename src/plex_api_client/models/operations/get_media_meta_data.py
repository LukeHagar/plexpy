"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import date
from enum import Enum
import httpx
from plex_api_client.types import BaseModel
from plex_api_client.utils import FieldMetadata, PathParamMetadata, QueryParamMetadata
import pydantic
from typing import List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class GetMediaMetaDataRequestTypedDict(TypedDict):
    rating_key: int
    r"""the id of the library item to return the children of."""
    include_concerts: NotRequired[bool]
    r"""Include concerts data if set to true."""
    include_extras: NotRequired[bool]
    r"""Include extra content (e.g. bonus features)."""
    include_on_deck: NotRequired[bool]
    r"""Include on-deck items."""
    include_popular_leaves: NotRequired[bool]
    r"""Include popular leaves (episodes/chapters)."""
    include_preferences: NotRequired[bool]
    r"""Include preferences information."""
    include_reviews: NotRequired[bool]
    r"""Include reviews for the content."""
    include_chapters: NotRequired[bool]
    r"""Include chapter details."""
    include_stations: NotRequired[bool]
    r"""Include station data."""
    include_external_media: NotRequired[bool]
    r"""Include external media data."""
    async_augment_metadata: NotRequired[bool]
    r"""Trigger asynchronous metadata augmentation."""
    async_check_files: NotRequired[bool]
    r"""Trigger asynchronous file checking."""
    async_refresh_analysis: NotRequired[bool]
    r"""Trigger asynchronous refresh of analysis."""
    async_refresh_local_media_agent: NotRequired[bool]
    r"""Trigger asynchronous refresh of the local media agent."""


class GetMediaMetaDataRequest(BaseModel):
    rating_key: Annotated[
        int,
        pydantic.Field(alias="ratingKey"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""the id of the library item to return the children of."""

    include_concerts: Annotated[
        Optional[bool],
        pydantic.Field(alias="includeConcerts"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Include concerts data if set to true."""

    include_extras: Annotated[
        Optional[bool],
        pydantic.Field(alias="includeExtras"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Include extra content (e.g. bonus features)."""

    include_on_deck: Annotated[
        Optional[bool],
        pydantic.Field(alias="includeOnDeck"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Include on-deck items."""

    include_popular_leaves: Annotated[
        Optional[bool],
        pydantic.Field(alias="includePopularLeaves"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Include popular leaves (episodes/chapters)."""

    include_preferences: Annotated[
        Optional[bool],
        pydantic.Field(alias="includePreferences"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Include preferences information."""

    include_reviews: Annotated[
        Optional[bool],
        pydantic.Field(alias="includeReviews"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Include reviews for the content."""

    include_chapters: Annotated[
        Optional[bool],
        pydantic.Field(alias="includeChapters"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Include chapter details."""

    include_stations: Annotated[
        Optional[bool],
        pydantic.Field(alias="includeStations"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Include station data."""

    include_external_media: Annotated[
        Optional[bool],
        pydantic.Field(alias="includeExternalMedia"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Include external media data."""

    async_augment_metadata: Annotated[
        Optional[bool],
        pydantic.Field(alias="asyncAugmentMetadata"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Trigger asynchronous metadata augmentation."""

    async_check_files: Annotated[
        Optional[bool],
        pydantic.Field(alias="asyncCheckFiles"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Trigger asynchronous file checking."""

    async_refresh_analysis: Annotated[
        Optional[bool],
        pydantic.Field(alias="asyncRefreshAnalysis"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Trigger asynchronous refresh of analysis."""

    async_refresh_local_media_agent: Annotated[
        Optional[bool],
        pydantic.Field(alias="asyncRefreshLocalMediaAgent"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Trigger asynchronous refresh of the local media agent."""


class OptimizedForStreaming1(int, Enum):
    ZERO = 0
    ONE = 1


GetMediaMetaDataOptimizedForStreamingTypedDict = TypeAliasType(
    "GetMediaMetaDataOptimizedForStreamingTypedDict",
    Union[OptimizedForStreaming1, bool],
)
r"""Has this media been optimized for streaming. NOTE: This can be 0, 1, false or true"""


GetMediaMetaDataOptimizedForStreaming = TypeAliasType(
    "GetMediaMetaDataOptimizedForStreaming", Union[OptimizedForStreaming1, bool]
)
r"""Has this media been optimized for streaming. NOTE: This can be 0, 1, false or true"""


class GetMediaMetaDataOptimizedForStreaming1(int, Enum):
    ZERO = 0
    ONE = 1


GetMediaMetaDataLibraryOptimizedForStreamingTypedDict = TypeAliasType(
    "GetMediaMetaDataLibraryOptimizedForStreamingTypedDict",
    Union[GetMediaMetaDataOptimizedForStreaming1, bool],
)
r"""Has this media been optimized for streaming. NOTE: This can be 0, 1, false or true"""


GetMediaMetaDataLibraryOptimizedForStreaming = TypeAliasType(
    "GetMediaMetaDataLibraryOptimizedForStreaming",
    Union[GetMediaMetaDataOptimizedForStreaming1, bool],
)
r"""Has this media been optimized for streaming. NOTE: This can be 0, 1, false or true"""


class GetMediaMetaDataHasThumbnail(str, Enum):
    r"""Indicates if the part has a thumbnail."""

    FALSE = "0"
    TRUE = "1"


class GetMediaMetaDataStreamTypedDict(TypedDict):
    id: int
    r"""Unique stream identifier."""
    stream_type: int
    r"""Stream type (1=video, 2=audio, 3=subtitle)."""
    codec: str
    r"""Codec used by the stream."""
    index: int
    r"""Index of the stream."""
    language: str
    r"""Language of the stream."""
    language_tag: str
    r"""Language tag (e.g., en)."""
    language_code: str
    r"""ISO language code."""
    display_title: str
    r"""Display title for the stream."""
    extended_display_title: str
    r"""Extended display title for the stream."""
    default: NotRequired[bool]
    r"""Indicates if this stream is default."""
    bitrate: NotRequired[int]
    r"""Bitrate of the stream."""
    header_compression: NotRequired[bool]
    r"""Indicates whether header compression is enabled."""
    dovibl_compat_id: NotRequired[int]
    r"""Dolby Vision BL compatibility ID."""
    dovibl_present: NotRequired[bool]
    r"""Indicates if Dolby Vision BL is present."""
    doviel_present: NotRequired[bool]
    r"""Indicates if Dolby Vision EL is present."""
    dovi_level: NotRequired[int]
    r"""Dolby Vision level."""
    dovi_present: NotRequired[bool]
    r"""Indicates if Dolby Vision is present."""
    dovi_profile: NotRequired[int]
    r"""Dolby Vision profile."""
    dovirpu_present: NotRequired[bool]
    r"""Indicates if Dolby Vision RPU is present."""
    dovi_version: NotRequired[str]
    r"""Dolby Vision version."""
    bit_depth: NotRequired[int]
    r"""Bit depth of the video stream."""
    chroma_location: NotRequired[str]
    r"""Chroma sample location."""
    chroma_subsampling: NotRequired[str]
    r"""Chroma subsampling format."""
    coded_height: NotRequired[int]
    r"""Coded video height."""
    coded_width: NotRequired[int]
    r"""Coded video width."""
    color_primaries: NotRequired[str]
    r"""Color primaries used."""
    color_range: NotRequired[str]
    r"""Color range (e.g., tv)."""
    color_space: NotRequired[str]
    r"""Color space."""
    color_trc: NotRequired[str]
    r"""Color transfer characteristics."""
    frame_rate: NotRequired[float]
    r"""Frame rate of the stream."""
    height: NotRequired[int]
    r"""Height of the video stream."""
    level: NotRequired[int]
    r"""Video level."""
    original: NotRequired[bool]
    r"""Indicates if this is the original stream."""
    has_scaling_matrix: NotRequired[bool]
    profile: NotRequired[str]
    r"""Video profile."""
    scan_type: NotRequired[str]
    ref_frames: NotRequired[int]
    r"""Number of reference frames."""
    width: NotRequired[int]
    r"""Width of the video stream."""
    selected: NotRequired[bool]
    r"""Indicates if this stream is selected (applicable for audio streams)."""
    forced: NotRequired[bool]
    channels: NotRequired[int]
    r"""Number of audio channels (for audio streams)."""
    audio_channel_layout: NotRequired[str]
    r"""Audio channel layout."""
    sampling_rate: NotRequired[int]
    r"""Sampling rate for the audio stream."""
    can_auto_sync: NotRequired[bool]
    r"""Indicates if the stream can auto-sync."""
    hearing_impaired: NotRequired[bool]
    r"""Indicates if the stream is for the hearing impaired."""
    dub: NotRequired[bool]
    r"""Indicates if the stream is a dub."""
    title: NotRequired[str]
    r"""Optional title for the stream (e.g., language variant)."""


class GetMediaMetaDataStream(BaseModel):
    id: int
    r"""Unique stream identifier."""

    stream_type: Annotated[int, pydantic.Field(alias="streamType")]
    r"""Stream type (1=video, 2=audio, 3=subtitle)."""

    codec: str
    r"""Codec used by the stream."""

    index: int
    r"""Index of the stream."""

    language: str
    r"""Language of the stream."""

    language_tag: Annotated[str, pydantic.Field(alias="languageTag")]
    r"""Language tag (e.g., en)."""

    language_code: Annotated[str, pydantic.Field(alias="languageCode")]
    r"""ISO language code."""

    display_title: Annotated[str, pydantic.Field(alias="displayTitle")]
    r"""Display title for the stream."""

    extended_display_title: Annotated[str, pydantic.Field(alias="extendedDisplayTitle")]
    r"""Extended display title for the stream."""

    default: Optional[bool] = None
    r"""Indicates if this stream is default."""

    bitrate: Optional[int] = None
    r"""Bitrate of the stream."""

    header_compression: Annotated[
        Optional[bool], pydantic.Field(alias="headerCompression")
    ] = None
    r"""Indicates whether header compression is enabled."""

    dovibl_compat_id: Annotated[
        Optional[int], pydantic.Field(alias="DOVIBLCompatID")
    ] = None
    r"""Dolby Vision BL compatibility ID."""

    dovibl_present: Annotated[Optional[bool], pydantic.Field(alias="DOVIBLPresent")] = (
        None
    )
    r"""Indicates if Dolby Vision BL is present."""

    doviel_present: Annotated[Optional[bool], pydantic.Field(alias="DOVIELPresent")] = (
        None
    )
    r"""Indicates if Dolby Vision EL is present."""

    dovi_level: Annotated[Optional[int], pydantic.Field(alias="DOVILevel")] = None
    r"""Dolby Vision level."""

    dovi_present: Annotated[Optional[bool], pydantic.Field(alias="DOVIPresent")] = None
    r"""Indicates if Dolby Vision is present."""

    dovi_profile: Annotated[Optional[int], pydantic.Field(alias="DOVIProfile")] = None
    r"""Dolby Vision profile."""

    dovirpu_present: Annotated[
        Optional[bool], pydantic.Field(alias="DOVIRPUPresent")
    ] = None
    r"""Indicates if Dolby Vision RPU is present."""

    dovi_version: Annotated[Optional[str], pydantic.Field(alias="DOVIVersion")] = None
    r"""Dolby Vision version."""

    bit_depth: Annotated[Optional[int], pydantic.Field(alias="bitDepth")] = None
    r"""Bit depth of the video stream."""

    chroma_location: Annotated[
        Optional[str], pydantic.Field(alias="chromaLocation")
    ] = None
    r"""Chroma sample location."""

    chroma_subsampling: Annotated[
        Optional[str], pydantic.Field(alias="chromaSubsampling")
    ] = None
    r"""Chroma subsampling format."""

    coded_height: Annotated[Optional[int], pydantic.Field(alias="codedHeight")] = None
    r"""Coded video height."""

    coded_width: Annotated[Optional[int], pydantic.Field(alias="codedWidth")] = None
    r"""Coded video width."""

    color_primaries: Annotated[
        Optional[str], pydantic.Field(alias="colorPrimaries")
    ] = None
    r"""Color primaries used."""

    color_range: Annotated[Optional[str], pydantic.Field(alias="colorRange")] = None
    r"""Color range (e.g., tv)."""

    color_space: Annotated[Optional[str], pydantic.Field(alias="colorSpace")] = None
    r"""Color space."""

    color_trc: Annotated[Optional[str], pydantic.Field(alias="colorTrc")] = None
    r"""Color transfer characteristics."""

    frame_rate: Annotated[Optional[float], pydantic.Field(alias="frameRate")] = None
    r"""Frame rate of the stream."""

    height: Optional[int] = None
    r"""Height of the video stream."""

    level: Optional[int] = None
    r"""Video level."""

    original: Optional[bool] = None
    r"""Indicates if this is the original stream."""

    has_scaling_matrix: Annotated[
        Optional[bool], pydantic.Field(alias="hasScalingMatrix")
    ] = None

    profile: Optional[str] = None
    r"""Video profile."""

    scan_type: Annotated[Optional[str], pydantic.Field(alias="scanType")] = None

    ref_frames: Annotated[Optional[int], pydantic.Field(alias="refFrames")] = None
    r"""Number of reference frames."""

    width: Optional[int] = None
    r"""Width of the video stream."""

    selected: Optional[bool] = None
    r"""Indicates if this stream is selected (applicable for audio streams)."""

    forced: Optional[bool] = None

    channels: Optional[int] = None
    r"""Number of audio channels (for audio streams)."""

    audio_channel_layout: Annotated[
        Optional[str], pydantic.Field(alias="audioChannelLayout")
    ] = None
    r"""Audio channel layout."""

    sampling_rate: Annotated[Optional[int], pydantic.Field(alias="samplingRate")] = None
    r"""Sampling rate for the audio stream."""

    can_auto_sync: Annotated[Optional[bool], pydantic.Field(alias="canAutoSync")] = None
    r"""Indicates if the stream can auto-sync."""

    hearing_impaired: Annotated[
        Optional[bool], pydantic.Field(alias="hearingImpaired")
    ] = None
    r"""Indicates if the stream is for the hearing impaired."""

    dub: Optional[bool] = None
    r"""Indicates if the stream is a dub."""

    title: Optional[str] = None
    r"""Optional title for the stream (e.g., language variant)."""


class GetMediaMetaDataPartTypedDict(TypedDict):
    id: int
    r"""Unique part identifier."""
    key: str
    r"""Key to access this part."""
    file: str
    r"""File path for the part."""
    size: int
    r"""File size in bytes."""
    accessible: NotRequired[bool]
    r"""Indicates if the part is accessible."""
    exists: NotRequired[bool]
    r"""Indicates if the part exists."""
    indexes: NotRequired[str]
    duration: NotRequired[int]
    r"""Duration of the part in milliseconds."""
    packet_length: NotRequired[int]
    container: NotRequired[str]
    r"""Container format of the part."""
    video_profile: NotRequired[str]
    r"""Video profile for the part."""
    audio_profile: NotRequired[str]
    r"""The audio profile used for the media (e.g., DTS, Dolby Digital, etc.)."""
    has64bit_offsets: NotRequired[bool]
    optimized_for_streaming: NotRequired[
        GetMediaMetaDataLibraryOptimizedForStreamingTypedDict
    ]
    r"""Has this media been optimized for streaming. NOTE: This can be 0, 1, false or true"""
    has_thumbnail: NotRequired[GetMediaMetaDataHasThumbnail]
    stream: NotRequired[List[GetMediaMetaDataStreamTypedDict]]
    r"""An array of streams for this part."""


class GetMediaMetaDataPart(BaseModel):
    id: int
    r"""Unique part identifier."""

    key: str
    r"""Key to access this part."""

    file: str
    r"""File path for the part."""

    size: int
    r"""File size in bytes."""

    accessible: Optional[bool] = None
    r"""Indicates if the part is accessible."""

    exists: Optional[bool] = None
    r"""Indicates if the part exists."""

    indexes: Optional[str] = None

    duration: Optional[int] = None
    r"""Duration of the part in milliseconds."""

    packet_length: Annotated[Optional[int], pydantic.Field(alias="packetLength")] = None

    container: Optional[str] = None
    r"""Container format of the part."""

    video_profile: Annotated[Optional[str], pydantic.Field(alias="videoProfile")] = None
    r"""Video profile for the part."""

    audio_profile: Annotated[Optional[str], pydantic.Field(alias="audioProfile")] = None
    r"""The audio profile used for the media (e.g., DTS, Dolby Digital, etc.)."""

    has64bit_offsets: Annotated[
        Optional[bool], pydantic.Field(alias="has64bitOffsets")
    ] = None

    optimized_for_streaming: Annotated[
        Optional[GetMediaMetaDataLibraryOptimizedForStreaming],
        pydantic.Field(alias="optimizedForStreaming"),
    ] = None
    r"""Has this media been optimized for streaming. NOTE: This can be 0, 1, false or true"""

    has_thumbnail: Annotated[
        Optional[GetMediaMetaDataHasThumbnail], pydantic.Field(alias="hasThumbnail")
    ] = GetMediaMetaDataHasThumbnail.FALSE

    stream: Annotated[
        Optional[List[GetMediaMetaDataStream]], pydantic.Field(alias="Stream")
    ] = None
    r"""An array of streams for this part."""


class GetMediaMetaDataMediaTypedDict(TypedDict):
    id: int
    r"""Unique media identifier."""
    has_voice_activity: bool
    r"""Indicates whether voice activity is detected."""
    part: List[GetMediaMetaDataPartTypedDict]
    r"""An array of parts for this media item."""
    duration: NotRequired[int]
    r"""Duration of the media in milliseconds."""
    bitrate: NotRequired[int]
    r"""Bitrate in bits per second."""
    width: NotRequired[int]
    r"""Video width in pixels."""
    height: NotRequired[int]
    r"""Video height in pixels."""
    aspect_ratio: NotRequired[float]
    r"""Aspect ratio of the video."""
    audio_channels: NotRequired[int]
    r"""Number of audio channels."""
    display_offset: NotRequired[int]
    audio_codec: NotRequired[str]
    r"""Audio codec used."""
    video_codec: NotRequired[str]
    r"""Video codec used."""
    video_resolution: NotRequired[str]
    r"""Video resolution (e.g., 4k)."""
    container: NotRequired[str]
    r"""File container type."""
    video_frame_rate: NotRequired[str]
    r"""Frame rate of the video. Values found include NTSC, PAL, 24p

    """
    video_profile: NotRequired[str]
    r"""Video profile (e.g., main 10)."""
    audio_profile: NotRequired[str]
    r"""The audio profile used for the media (e.g., DTS, Dolby Digital, etc.)."""
    optimized_for_streaming: NotRequired[GetMediaMetaDataOptimizedForStreamingTypedDict]
    r"""Has this media been optimized for streaming. NOTE: This can be 0, 1, false or true"""
    has64bit_offsets: NotRequired[bool]


class GetMediaMetaDataMedia(BaseModel):
    id: int
    r"""Unique media identifier."""

    has_voice_activity: Annotated[bool, pydantic.Field(alias="hasVoiceActivity")]
    r"""Indicates whether voice activity is detected."""

    part: Annotated[List[GetMediaMetaDataPart], pydantic.Field(alias="Part")]
    r"""An array of parts for this media item."""

    duration: Optional[int] = None
    r"""Duration of the media in milliseconds."""

    bitrate: Optional[int] = None
    r"""Bitrate in bits per second."""

    width: Optional[int] = None
    r"""Video width in pixels."""

    height: Optional[int] = None
    r"""Video height in pixels."""

    aspect_ratio: Annotated[Optional[float], pydantic.Field(alias="aspectRatio")] = None
    r"""Aspect ratio of the video."""

    audio_channels: Annotated[Optional[int], pydantic.Field(alias="audioChannels")] = (
        None
    )
    r"""Number of audio channels."""

    display_offset: Annotated[Optional[int], pydantic.Field(alias="displayOffset")] = (
        None
    )

    audio_codec: Annotated[Optional[str], pydantic.Field(alias="audioCodec")] = None
    r"""Audio codec used."""

    video_codec: Annotated[Optional[str], pydantic.Field(alias="videoCodec")] = None
    r"""Video codec used."""

    video_resolution: Annotated[
        Optional[str], pydantic.Field(alias="videoResolution")
    ] = None
    r"""Video resolution (e.g., 4k)."""

    container: Optional[str] = None
    r"""File container type."""

    video_frame_rate: Annotated[
        Optional[str], pydantic.Field(alias="videoFrameRate")
    ] = None
    r"""Frame rate of the video. Values found include NTSC, PAL, 24p

    """

    video_profile: Annotated[Optional[str], pydantic.Field(alias="videoProfile")] = None
    r"""Video profile (e.g., main 10)."""

    audio_profile: Annotated[Optional[str], pydantic.Field(alias="audioProfile")] = None
    r"""The audio profile used for the media (e.g., DTS, Dolby Digital, etc.)."""

    optimized_for_streaming: Annotated[
        Optional[GetMediaMetaDataOptimizedForStreaming],
        pydantic.Field(alias="optimizedForStreaming"),
    ] = None
    r"""Has this media been optimized for streaming. NOTE: This can be 0, 1, false or true"""

    has64bit_offsets: Annotated[
        Optional[bool], pydantic.Field(alias="has64bitOffsets")
    ] = None


class GetMediaMetaDataImageTypedDict(TypedDict):
    alt: str
    r"""Alternate text for the image."""
    type: str
    r"""The type of image (e.g., coverPoster, background, clearLogo)."""
    url: str
    r"""The URL of the image."""


class GetMediaMetaDataImage(BaseModel):
    alt: str
    r"""Alternate text for the image."""

    type: str
    r"""The type of image (e.g., coverPoster, background, clearLogo)."""

    url: str
    r"""The URL of the image."""


class GetMediaMetaDataUltraBlurColorsTypedDict(TypedDict):
    top_left: str
    r"""The top-left color value."""
    top_right: str
    r"""The top-right color value."""
    bottom_right: str
    r"""The bottom-right color value."""
    bottom_left: str
    r"""The bottom-left color value."""


class GetMediaMetaDataUltraBlurColors(BaseModel):
    top_left: Annotated[str, pydantic.Field(alias="topLeft")]
    r"""The top-left color value."""

    top_right: Annotated[str, pydantic.Field(alias="topRight")]
    r"""The top-right color value."""

    bottom_right: Annotated[str, pydantic.Field(alias="bottomRight")]
    r"""The bottom-right color value."""

    bottom_left: Annotated[str, pydantic.Field(alias="bottomLeft")]
    r"""The bottom-left color value."""


class GetMediaMetaDataGenreTypedDict(TypedDict):
    id: int
    r"""The unique genre identifier."""
    filter_: str
    r"""The filter string for the genre."""
    tag: str
    r"""The genre name."""


class GetMediaMetaDataGenre(BaseModel):
    id: int
    r"""The unique genre identifier."""

    filter_: Annotated[str, pydantic.Field(alias="filter")]
    r"""The filter string for the genre."""

    tag: str
    r"""The genre name."""


class GetMediaMetaDataCountryTypedDict(TypedDict):
    id: int
    r"""The unique country identifier."""
    filter_: str
    r"""The filter string for the country."""
    tag: str
    r"""The country name."""


class GetMediaMetaDataCountry(BaseModel):
    id: int
    r"""The unique country identifier."""

    filter_: Annotated[str, pydantic.Field(alias="filter")]
    r"""The filter string for the country."""

    tag: str
    r"""The country name."""


class GetMediaMetaDataGuidsTypedDict(TypedDict):
    id: str
    r"""The GUID value."""


class GetMediaMetaDataGuids(BaseModel):
    id: str
    r"""The GUID value."""


class RatingsTypedDict(TypedDict):
    image: str
    r"""The image or reference for the rating."""
    value: float
    r"""The rating value."""
    type: str
    r"""The type of rating (e.g., audience, critic)."""


class Ratings(BaseModel):
    image: str
    r"""The image or reference for the rating."""

    value: float
    r"""The rating value."""

    type: str
    r"""The type of rating (e.g., audience, critic)."""


class GetMediaMetaDataRoleTypedDict(TypedDict):
    id: int
    r"""The unique role identifier."""
    filter_: str
    r"""The filter string for the role."""
    tag: str
    r"""The actor's name."""
    tag_key: str
    r"""A key associated with the actor tag."""
    role: NotRequired[str]
    r"""The character name or role."""
    thumb: NotRequired[str]
    r"""URL for the role thumbnail image."""


class GetMediaMetaDataRole(BaseModel):
    id: int
    r"""The unique role identifier."""

    filter_: Annotated[str, pydantic.Field(alias="filter")]
    r"""The filter string for the role."""

    tag: str
    r"""The actor's name."""

    tag_key: Annotated[str, pydantic.Field(alias="tagKey")]
    r"""A key associated with the actor tag."""

    role: Optional[str] = None
    r"""The character name or role."""

    thumb: Optional[str] = None
    r"""URL for the role thumbnail image."""


class GetMediaMetaDataDirectorTypedDict(TypedDict):
    id: int
    r"""The unique role identifier."""
    filter_: str
    r"""The filter string for the role."""
    tag: str
    r"""The actor's name."""
    tag_key: str
    r"""A key associated with the actor tag."""
    role: NotRequired[str]
    r"""The character name or role."""
    thumb: NotRequired[str]
    r"""URL for the role thumbnail image."""


class GetMediaMetaDataDirector(BaseModel):
    id: int
    r"""The unique role identifier."""

    filter_: Annotated[str, pydantic.Field(alias="filter")]
    r"""The filter string for the role."""

    tag: str
    r"""The actor's name."""

    tag_key: Annotated[str, pydantic.Field(alias="tagKey")]
    r"""A key associated with the actor tag."""

    role: Optional[str] = None
    r"""The character name or role."""

    thumb: Optional[str] = None
    r"""URL for the role thumbnail image."""


class GetMediaMetaDataWriterTypedDict(TypedDict):
    id: int
    r"""The unique role identifier."""
    filter_: str
    r"""The filter string for the role."""
    tag: str
    r"""The actor's name."""
    tag_key: str
    r"""A key associated with the actor tag."""
    role: NotRequired[str]
    r"""The character name or role."""
    thumb: NotRequired[str]
    r"""URL for the role thumbnail image."""


class GetMediaMetaDataWriter(BaseModel):
    id: int
    r"""The unique role identifier."""

    filter_: Annotated[str, pydantic.Field(alias="filter")]
    r"""The filter string for the role."""

    tag: str
    r"""The actor's name."""

    tag_key: Annotated[str, pydantic.Field(alias="tagKey")]
    r"""A key associated with the actor tag."""

    role: Optional[str] = None
    r"""The character name or role."""

    thumb: Optional[str] = None
    r"""URL for the role thumbnail image."""


class ProducerTypedDict(TypedDict):
    id: int
    r"""The unique role identifier."""
    filter_: str
    r"""The filter string for the role."""
    tag: str
    r"""The actor's name."""
    tag_key: str
    r"""A key associated with the actor tag."""
    role: NotRequired[str]
    r"""The character name or role."""
    thumb: NotRequired[str]
    r"""URL for the role thumbnail image."""


class Producer(BaseModel):
    id: int
    r"""The unique role identifier."""

    filter_: Annotated[str, pydantic.Field(alias="filter")]
    r"""The filter string for the role."""

    tag: str
    r"""The actor's name."""

    tag_key: Annotated[str, pydantic.Field(alias="tagKey")]
    r"""A key associated with the actor tag."""

    role: Optional[str] = None
    r"""The character name or role."""

    thumb: Optional[str] = None
    r"""URL for the role thumbnail image."""


class SimilarTypedDict(TypedDict):
    id: int
    r"""The unique similar item identifier."""
    filter_: str
    r"""The filter string for similar items."""
    tag: str
    r"""The tag or title of the similar content."""


class Similar(BaseModel):
    id: int
    r"""The unique similar item identifier."""

    filter_: Annotated[str, pydantic.Field(alias="filter")]
    r"""The filter string for similar items."""

    tag: str
    r"""The tag or title of the similar content."""


class GetMediaMetaDataLocationTypedDict(TypedDict):
    path: str
    r"""The file path for the location."""


class GetMediaMetaDataLocation(BaseModel):
    path: str
    r"""The file path for the location."""


class GetMediaMetaDataMetadataTypedDict(TypedDict):
    rating_key: str
    r"""The rating key of the metadata item."""
    key: str
    r"""The API key to access metadata details."""
    guid: str
    r"""The globally unique identifier for the item."""
    type: str
    r"""The type of content (e.g., show, movie)."""
    title: str
    r"""The title of the content."""
    library_section_title: str
    r"""The title of the library section."""
    library_section_id: int
    r"""The ID of the library section."""
    library_section_key: str
    r"""The key of the library section."""
    summary: str
    r"""A summary of the content."""
    year: int
    r"""The release year."""
    thumb: str
    r"""URL of the thumbnail image."""
    art: str
    r"""URL of the art image."""
    duration: int
    r"""Duration of the content in milliseconds."""
    added_at: int
    updated_at: int
    image: List[GetMediaMetaDataImageTypedDict]
    r"""An array of image objects."""
    ultra_blur_colors: GetMediaMetaDataUltraBlurColorsTypedDict
    parent_rating_key: NotRequired[str]
    r"""The rating key of the parent of this metadata item."""
    grandparent_rating_key: NotRequired[str]
    r"""The rating key of the grandparent of this metadata item."""
    parent_guid: NotRequired[str]
    r"""A GUID identifying the parent entity (e.g., season) for the item."""
    grandparent_guid: NotRequired[str]
    r"""A GUID identifying the grandparent entity (e.g., show)."""
    grandparent_slug: NotRequired[str]
    r"""A URL-friendly identifier (slug) for the grandparent entity."""
    grandparent_key: NotRequired[str]
    r"""A key identifying the grandparent metadata in the library."""
    parent_key: NotRequired[str]
    r"""A key identifying the parent metadata in the library."""
    slug: NotRequired[str]
    r"""A URL-friendly identifier for the item."""
    studio: NotRequired[str]
    r"""The studio that produced the content."""
    original_title: NotRequired[str]
    r"""The original title of the content."""
    content_rating: NotRequired[str]
    r"""The content rating (e.g., TV-MA)."""
    index: NotRequired[int]
    r"""The index or order of the item."""
    grandparent_title: NotRequired[str]
    r"""The title of the grandparent entity (typically the show's title)."""
    parent_title: NotRequired[str]
    r"""The title of the parent entity (typically the season's title)."""
    audience_rating: NotRequired[float]
    r"""The audience rating for the content."""
    view_count: NotRequired[int]
    r"""The number of times the item has been viewed."""
    skip_count: NotRequired[int]
    r"""The number of times the item has been skipped."""
    last_viewed_at: NotRequired[int]
    r"""Unix timestamp of when the item was last viewed."""
    rating: NotRequired[float]
    r"""The general rating"""
    rating_image: NotRequired[str]
    r"""The URL or identifier for the rating image (e.g., Rotten Tomatoes rating image)."""
    tagline: NotRequired[str]
    r"""The tagline of the content."""
    chapter_source: NotRequired[str]
    primary_extra_key: NotRequired[str]
    theme: NotRequired[str]
    r"""URL of the theme image."""
    originally_available_at: NotRequired[date]
    r"""The original release date."""
    leaf_count: NotRequired[int]
    r"""The total number of episodes (or leaves)."""
    viewed_leaf_count: NotRequired[int]
    r"""The number of episodes that have been viewed."""
    child_count: NotRequired[int]
    r"""The number of child items."""
    audience_rating_image: NotRequired[str]
    r"""The URL for the audience rating image."""
    parent_index: NotRequired[int]
    r"""The index number of the parent entity, which could indicate its order or position."""
    parent_thumb: NotRequired[str]
    r"""The URL of the parent's thumbnail image."""
    grandparent_thumb: NotRequired[str]
    r"""The URL of the grandparent's thumbnail image."""
    grandparent_art: NotRequired[str]
    r"""The URL of the grandparent's art image."""
    media: NotRequired[List[GetMediaMetaDataMediaTypedDict]]
    genre: NotRequired[List[GetMediaMetaDataGenreTypedDict]]
    r"""An array of genre tags."""
    country: NotRequired[List[GetMediaMetaDataCountryTypedDict]]
    r"""An array of country tags."""
    guids: NotRequired[List[GetMediaMetaDataGuidsTypedDict]]
    r"""An array of GUID objects."""
    ratings: NotRequired[List[RatingsTypedDict]]
    r"""An array of rating objects."""
    role: NotRequired[List[GetMediaMetaDataRoleTypedDict]]
    r"""An array of Actor roles."""
    director: NotRequired[List[GetMediaMetaDataDirectorTypedDict]]
    r"""An array of Director roles."""
    writer: NotRequired[List[GetMediaMetaDataWriterTypedDict]]
    r"""An array of Writer roles."""
    producer: NotRequired[List[ProducerTypedDict]]
    r"""An array of Writer roles."""
    similar: NotRequired[List[SimilarTypedDict]]
    r"""An array of similar content objects."""
    location: NotRequired[List[GetMediaMetaDataLocationTypedDict]]
    r"""An array of location objects."""


class GetMediaMetaDataMetadata(BaseModel):
    rating_key: Annotated[str, pydantic.Field(alias="ratingKey")]
    r"""The rating key of the metadata item."""

    key: str
    r"""The API key to access metadata details."""

    guid: str
    r"""The globally unique identifier for the item."""

    type: str
    r"""The type of content (e.g., show, movie)."""

    title: str
    r"""The title of the content."""

    library_section_title: Annotated[str, pydantic.Field(alias="librarySectionTitle")]
    r"""The title of the library section."""

    library_section_id: Annotated[int, pydantic.Field(alias="librarySectionID")]
    r"""The ID of the library section."""

    library_section_key: Annotated[str, pydantic.Field(alias="librarySectionKey")]
    r"""The key of the library section."""

    summary: str
    r"""A summary of the content."""

    year: int
    r"""The release year."""

    thumb: str
    r"""URL of the thumbnail image."""

    art: str
    r"""URL of the art image."""

    duration: int
    r"""Duration of the content in milliseconds."""

    added_at: Annotated[int, pydantic.Field(alias="addedAt")]

    updated_at: Annotated[int, pydantic.Field(alias="updatedAt")]

    image: Annotated[List[GetMediaMetaDataImage], pydantic.Field(alias="Image")]
    r"""An array of image objects."""

    ultra_blur_colors: Annotated[
        GetMediaMetaDataUltraBlurColors, pydantic.Field(alias="UltraBlurColors")
    ]

    parent_rating_key: Annotated[
        Optional[str], pydantic.Field(alias="parentRatingKey")
    ] = None
    r"""The rating key of the parent of this metadata item."""

    grandparent_rating_key: Annotated[
        Optional[str], pydantic.Field(alias="grandparentRatingKey")
    ] = None
    r"""The rating key of the grandparent of this metadata item."""

    parent_guid: Annotated[Optional[str], pydantic.Field(alias="parentGuid")] = None
    r"""A GUID identifying the parent entity (e.g., season) for the item."""

    grandparent_guid: Annotated[
        Optional[str], pydantic.Field(alias="grandparentGuid")
    ] = None
    r"""A GUID identifying the grandparent entity (e.g., show)."""

    grandparent_slug: Annotated[
        Optional[str], pydantic.Field(alias="grandparentSlug")
    ] = None
    r"""A URL-friendly identifier (slug) for the grandparent entity."""

    grandparent_key: Annotated[
        Optional[str], pydantic.Field(alias="grandparentKey")
    ] = None
    r"""A key identifying the grandparent metadata in the library."""

    parent_key: Annotated[Optional[str], pydantic.Field(alias="parentKey")] = None
    r"""A key identifying the parent metadata in the library."""

    slug: Optional[str] = None
    r"""A URL-friendly identifier for the item."""

    studio: Optional[str] = None
    r"""The studio that produced the content."""

    original_title: Annotated[Optional[str], pydantic.Field(alias="originalTitle")] = (
        None
    )
    r"""The original title of the content."""

    content_rating: Annotated[Optional[str], pydantic.Field(alias="contentRating")] = (
        None
    )
    r"""The content rating (e.g., TV-MA)."""

    index: Optional[int] = None
    r"""The index or order of the item."""

    grandparent_title: Annotated[
        Optional[str], pydantic.Field(alias="grandparentTitle")
    ] = None
    r"""The title of the grandparent entity (typically the show's title)."""

    parent_title: Annotated[Optional[str], pydantic.Field(alias="parentTitle")] = None
    r"""The title of the parent entity (typically the season's title)."""

    audience_rating: Annotated[
        Optional[float], pydantic.Field(alias="audienceRating")
    ] = None
    r"""The audience rating for the content."""

    view_count: Annotated[Optional[int], pydantic.Field(alias="viewCount")] = None
    r"""The number of times the item has been viewed."""

    skip_count: Annotated[Optional[int], pydantic.Field(alias="skipCount")] = None
    r"""The number of times the item has been skipped."""

    last_viewed_at: Annotated[Optional[int], pydantic.Field(alias="lastViewedAt")] = (
        None
    )
    r"""Unix timestamp of when the item was last viewed."""

    rating: Optional[float] = None
    r"""The general rating"""

    rating_image: Annotated[Optional[str], pydantic.Field(alias="ratingImage")] = None
    r"""The URL or identifier for the rating image (e.g., Rotten Tomatoes rating image)."""

    tagline: Optional[str] = None
    r"""The tagline of the content."""

    chapter_source: Annotated[Optional[str], pydantic.Field(alias="chapterSource")] = (
        None
    )

    primary_extra_key: Annotated[
        Optional[str], pydantic.Field(alias="primaryExtraKey")
    ] = None

    theme: Optional[str] = None
    r"""URL of the theme image."""

    originally_available_at: Annotated[
        Optional[date], pydantic.Field(alias="originallyAvailableAt")
    ] = None
    r"""The original release date."""

    leaf_count: Annotated[Optional[int], pydantic.Field(alias="leafCount")] = None
    r"""The total number of episodes (or leaves)."""

    viewed_leaf_count: Annotated[
        Optional[int], pydantic.Field(alias="viewedLeafCount")
    ] = None
    r"""The number of episodes that have been viewed."""

    child_count: Annotated[Optional[int], pydantic.Field(alias="childCount")] = None
    r"""The number of child items."""

    audience_rating_image: Annotated[
        Optional[str], pydantic.Field(alias="audienceRatingImage")
    ] = None
    r"""The URL for the audience rating image."""

    parent_index: Annotated[Optional[int], pydantic.Field(alias="parentIndex")] = None
    r"""The index number of the parent entity, which could indicate its order or position."""

    parent_thumb: Annotated[Optional[str], pydantic.Field(alias="parentThumb")] = None
    r"""The URL of the parent's thumbnail image."""

    grandparent_thumb: Annotated[
        Optional[str], pydantic.Field(alias="grandparentThumb")
    ] = None
    r"""The URL of the grandparent's thumbnail image."""

    grandparent_art: Annotated[
        Optional[str], pydantic.Field(alias="grandparentArt")
    ] = None
    r"""The URL of the grandparent's art image."""

    media: Annotated[
        Optional[List[GetMediaMetaDataMedia]], pydantic.Field(alias="Media")
    ] = None

    genre: Annotated[
        Optional[List[GetMediaMetaDataGenre]], pydantic.Field(alias="Genre")
    ] = None
    r"""An array of genre tags."""

    country: Annotated[
        Optional[List[GetMediaMetaDataCountry]], pydantic.Field(alias="Country")
    ] = None
    r"""An array of country tags."""

    guids: Annotated[
        Optional[List[GetMediaMetaDataGuids]], pydantic.Field(alias="Guid")
    ] = None
    r"""An array of GUID objects."""

    ratings: Annotated[Optional[List[Ratings]], pydantic.Field(alias="Rating")] = None
    r"""An array of rating objects."""

    role: Annotated[
        Optional[List[GetMediaMetaDataRole]], pydantic.Field(alias="Role")
    ] = None
    r"""An array of Actor roles."""

    director: Annotated[
        Optional[List[GetMediaMetaDataDirector]], pydantic.Field(alias="Director")
    ] = None
    r"""An array of Director roles."""

    writer: Annotated[
        Optional[List[GetMediaMetaDataWriter]], pydantic.Field(alias="Writer")
    ] = None
    r"""An array of Writer roles."""

    producer: Annotated[Optional[List[Producer]], pydantic.Field(alias="Producer")] = (
        None
    )
    r"""An array of Writer roles."""

    similar: Annotated[Optional[List[Similar]], pydantic.Field(alias="Similar")] = None
    r"""An array of similar content objects."""

    location: Annotated[
        Optional[List[GetMediaMetaDataLocation]], pydantic.Field(alias="Location")
    ] = None
    r"""An array of location objects."""


class GetMediaMetaDataMediaContainerTypedDict(TypedDict):
    size: int
    r"""Number of media items returned in this response."""
    allow_sync: bool
    r"""Indicates whether syncing is allowed."""
    identifier: str
    r"""An plugin identifier for the media container."""
    library_section_id: int
    r"""The unique identifier for the library section."""
    library_section_title: str
    r"""The title of the library section."""
    media_tag_prefix: str
    r"""The prefix used for media tag resource paths."""
    media_tag_version: int
    r"""The version number for media tags."""
    metadata: List[GetMediaMetaDataMetadataTypedDict]
    r"""An array of metadata items."""
    library_section_uuid: NotRequired[str]
    r"""The universally unique identifier for the library section."""


class GetMediaMetaDataMediaContainer(BaseModel):
    size: int
    r"""Number of media items returned in this response."""

    allow_sync: Annotated[bool, pydantic.Field(alias="allowSync")]
    r"""Indicates whether syncing is allowed."""

    identifier: str
    r"""An plugin identifier for the media container."""

    library_section_id: Annotated[int, pydantic.Field(alias="librarySectionID")]
    r"""The unique identifier for the library section."""

    library_section_title: Annotated[str, pydantic.Field(alias="librarySectionTitle")]
    r"""The title of the library section."""

    media_tag_prefix: Annotated[str, pydantic.Field(alias="mediaTagPrefix")]
    r"""The prefix used for media tag resource paths."""

    media_tag_version: Annotated[int, pydantic.Field(alias="mediaTagVersion")]
    r"""The version number for media tags."""

    metadata: Annotated[
        List[GetMediaMetaDataMetadata], pydantic.Field(alias="Metadata")
    ]
    r"""An array of metadata items."""

    library_section_uuid: Annotated[
        Optional[str], pydantic.Field(alias="librarySectionUUID")
    ] = None
    r"""The universally unique identifier for the library section."""


class GetMediaMetaDataResponseBodyTypedDict(TypedDict):
    r"""The metadata of the library item."""

    media_container: NotRequired[GetMediaMetaDataMediaContainerTypedDict]


class GetMediaMetaDataResponseBody(BaseModel):
    r"""The metadata of the library item."""

    media_container: Annotated[
        Optional[GetMediaMetaDataMediaContainer], pydantic.Field(alias="MediaContainer")
    ] = None


class GetMediaMetaDataResponseTypedDict(TypedDict):
    content_type: str
    r"""HTTP response content type for this operation"""
    status_code: int
    r"""HTTP response status code for this operation"""
    raw_response: httpx.Response
    r"""Raw HTTP response; suitable for custom response parsing"""
    object: NotRequired[GetMediaMetaDataResponseBodyTypedDict]
    r"""The metadata of the library item."""


class GetMediaMetaDataResponse(BaseModel):
    content_type: str
    r"""HTTP response content type for this operation"""

    status_code: int
    r"""HTTP response status code for this operation"""

    raw_response: httpx.Response
    r"""Raw HTTP response; suitable for custom response parsing"""

    object: Optional[GetMediaMetaDataResponseBody] = None
    r"""The metadata of the library item."""
