"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import httpx
from plex_api_client.types import BaseModel
from plex_api_client.utils import FieldMetadata, PathParamMetadata
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetPlaylistRequestTypedDict(TypedDict):
    playlist_id: float
    r"""the ID of the playlist"""


class GetPlaylistRequest(BaseModel):
    playlist_id: Annotated[
        float,
        pydantic.Field(alias="playlistID"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""the ID of the playlist"""


class GetPlaylistMetadataTypedDict(TypedDict):
    content: NotRequired[str]
    rating_key: NotRequired[str]
    key: NotRequired[str]
    guid: NotRequired[str]
    type: NotRequired[str]
    title: NotRequired[str]
    summary: NotRequired[str]
    smart: NotRequired[bool]
    playlist_type: NotRequired[str]
    composite: NotRequired[str]
    icon: NotRequired[str]
    duration: NotRequired[int]
    leaf_count: NotRequired[int]
    added_at: NotRequired[int]
    updated_at: NotRequired[int]


class GetPlaylistMetadata(BaseModel):
    content: Optional[str] = None

    rating_key: Annotated[Optional[str], pydantic.Field(alias="ratingKey")] = None

    key: Optional[str] = None

    guid: Optional[str] = None

    type: Optional[str] = None

    title: Optional[str] = None

    summary: Optional[str] = None

    smart: Optional[bool] = None

    playlist_type: Annotated[Optional[str], pydantic.Field(alias="playlistType")] = None

    composite: Optional[str] = None

    icon: Optional[str] = None

    duration: Optional[int] = None

    leaf_count: Annotated[Optional[int], pydantic.Field(alias="leafCount")] = None

    added_at: Annotated[Optional[int], pydantic.Field(alias="addedAt")] = None

    updated_at: Annotated[Optional[int], pydantic.Field(alias="updatedAt")] = None


class GetPlaylistMediaContainerTypedDict(TypedDict):
    size: NotRequired[int]
    metadata: NotRequired[List[GetPlaylistMetadataTypedDict]]


class GetPlaylistMediaContainer(BaseModel):
    size: Optional[int] = None

    metadata: Annotated[
        Optional[List[GetPlaylistMetadata]], pydantic.Field(alias="Metadata")
    ] = None


class GetPlaylistResponseBodyTypedDict(TypedDict):
    r"""The playlist"""

    media_container: NotRequired[GetPlaylistMediaContainerTypedDict]


class GetPlaylistResponseBody(BaseModel):
    r"""The playlist"""

    media_container: Annotated[
        Optional[GetPlaylistMediaContainer], pydantic.Field(alias="MediaContainer")
    ] = None


class GetPlaylistResponseTypedDict(TypedDict):
    content_type: str
    r"""HTTP response content type for this operation"""
    status_code: int
    r"""HTTP response status code for this operation"""
    raw_response: httpx.Response
    r"""Raw HTTP response; suitable for custom response parsing"""
    object: NotRequired[GetPlaylistResponseBodyTypedDict]
    r"""The playlist"""


class GetPlaylistResponse(BaseModel):
    content_type: str
    r"""HTTP response content type for this operation"""

    status_code: int
    r"""HTTP response status code for this operation"""

    raw_response: httpx.Response
    r"""Raw HTTP response; suitable for custom response parsing"""

    object: Optional[GetPlaylistResponseBody] = None
    r"""The playlist"""
