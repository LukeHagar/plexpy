"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import httpx
from plex_api_client.models.errors import PlexAPIError
from plex_api_client.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class StartTaskButlerErrorsTypedDict(TypedDict):
    code: NotRequired[int]
    message: NotRequired[str]
    status: NotRequired[int]


class StartTaskButlerErrors(BaseModel):
    code: Optional[int] = None

    message: Optional[str] = None

    status: Optional[int] = None


class StartTaskUnauthorizedData(BaseModel):
    errors: Optional[List[StartTaskButlerErrors]] = None

    raw_response: Annotated[Optional[httpx.Response], pydantic.Field(exclude=True)] = (
        None
    )
    r"""Raw HTTP response; suitable for custom response parsing"""


class StartTaskUnauthorized(PlexAPIError):
    r"""Unauthorized - Returned if the X-Plex-Token is missing from the header or query."""

    data: StartTaskUnauthorizedData

    def __init__(
        self,
        data: StartTaskUnauthorizedData,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data


class StartTaskErrorsTypedDict(TypedDict):
    code: NotRequired[int]
    message: NotRequired[str]
    status: NotRequired[int]


class StartTaskErrors(BaseModel):
    code: Optional[int] = None

    message: Optional[str] = None

    status: Optional[int] = None


class StartTaskBadRequestData(BaseModel):
    errors: Optional[List[StartTaskErrors]] = None

    raw_response: Annotated[Optional[httpx.Response], pydantic.Field(exclude=True)] = (
        None
    )
    r"""Raw HTTP response; suitable for custom response parsing"""


class StartTaskBadRequest(PlexAPIError):
    r"""Bad Request - A parameter was not specified, or was specified incorrectly."""

    data: StartTaskBadRequestData

    def __init__(
        self,
        data: StartTaskBadRequestData,
        raw_response: httpx.Response,
        body: Optional[str] = None,
    ):
        message = body or raw_response.text
        super().__init__(message, raw_response, body)
        self.data = data
