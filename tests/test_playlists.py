"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

import dateutil.parser
from plex_api_client import PlexAPI
from plex_api_client.models import operations


def test_playlists_create_playlist():
    s = PlexAPI(
        access_token="<YOUR_API_KEY_HERE>",
    )

    assert s is not None

    res = s.playlists.create_playlist(
        request={
            "title": "<value>",
            "type": operations.CreatePlaylistQueryParamType.PHOTO,
            "smart": operations.Smart.ONE,
            "uri": "https://inborn-brochure.biz",
        }
    )
    assert res.status_code == 200
    assert res.object is not None
    assert res.object == operations.CreatePlaylistResponseBody(
        media_container=operations.CreatePlaylistMediaContainer(
            size=7,
            metadata=[
                operations.CreatePlaylistMetadata(
                    rating_key="96",
                    key="/playlists/96/items",
                    guid="com.plexapp.agents.none://a2f92937-1408-40e2-b022-63a8a9377e55",
                    type="playlist",
                    title="A Great Playlist",
                    summary="What a great playlist",
                    smart=False,
                    playlist_type="video",
                    icon="playlist://image.smart",
                    view_count=1,
                    last_viewed_at=1705719589,
                    leaf_count=1,
                    added_at=1705719589,
                    updated_at=1705724593,
                    composite="/playlists/96/composite/1705724593",
                    duration=141000,
                ),
            ],
        ),
    )


def test_playlists_get_playlists():
    s = PlexAPI(
        access_token="<YOUR_API_KEY_HERE>",
    )

    assert s is not None

    res = s.playlists.get_playlists()
    assert res.status_code == 200
    assert res.object is not None
    assert res.object == operations.GetPlaylistsResponseBody(
        media_container=operations.GetPlaylistsMediaContainer(
            size=4,
            metadata=[
                operations.GetPlaylistsMetadata(
                    rating_key="92",
                    key="/playlists/92/items",
                    guid="com.plexapp.agents.none://7ca5aaef-58e8-4828-9e21-c009c97f2903",
                    type="playlist",
                    title="Static Playlist",
                    summary="A Great Playlist",
                    smart=False,
                    playlist_type="video",
                    composite="/playlists/92/composite/1705716440",
                    icon="playlist://image.smart",
                    view_count=1,
                    last_viewed_at=1705716298,
                    duration=7328000,
                    leaf_count=32,
                    added_at=1705716298,
                    updated_at=1705716440,
                ),
            ],
        ),
    )


def test_playlists_get_playlist():
    s = PlexAPI(
        access_token="<YOUR_API_KEY_HERE>",
    )

    assert s is not None

    res = s.playlists.get_playlist(playlist_id=4109.48)
    assert res.status_code == 200
    assert res.object is not None
    assert res.object == operations.GetPlaylistResponseBody(
        media_container=operations.GetPlaylistMediaContainer(
            size=1,
            metadata=[
                operations.GetPlaylistMetadata(
                    content="library://x/directory/%2Flibrary%2Fsections%2F1%2Fall%3Ftype%3D1%26push%3D1%26title%3D2%26or%3D1%26title%3DSerenity%26pop%3D1",
                    rating_key="95",
                    key="/playlists/95/items",
                    guid="com.plexapp.agents.none://87425529-380f-44b8-a689-9a0537e7ec91",
                    type="playlist",
                    title="Smart Movie Playlist",
                    summary="",
                    smart=True,
                    playlist_type="video",
                    composite="/playlists/95/composite/1705717387",
                    icon="playlist://image.smart",
                    duration=282000,
                    leaf_count=2,
                    added_at=1705716493,
                    updated_at=1705717387,
                ),
            ],
        ),
    )


def test_playlists_delete_playlist():
    s = PlexAPI(
        access_token="<YOUR_API_KEY_HERE>",
    )

    assert s is not None

    res = s.playlists.delete_playlist(playlist_id=216.22)
    assert res.status_code == 204


def test_playlists_update_playlist():
    s = PlexAPI(
        access_token="<YOUR_API_KEY_HERE>",
    )

    assert s is not None

    res = s.playlists.update_playlist(playlist_id=3915)
    assert res.status_code == 200


def test_playlists_get_playlist_contents():
    s = PlexAPI(
        access_token="<YOUR_API_KEY_HERE>",
    )

    assert s is not None

    res = s.playlists.get_playlist_contents(
        playlist_id=5004.46, type_=operations.GetPlaylistContentsQueryParamType.TV_SHOW
    )
    assert res.status_code == 200
    assert res.object is not None
    assert res.object == operations.GetPlaylistContentsResponseBody(
        media_container=operations.GetPlaylistContentsMediaContainer(
            size=2,
            composite="/playlists/95/composite/1705717521",
            duration=282,
            leaf_count=2,
            playlist_type="video",
            rating_key="95",
            smart=True,
            title="Smart Movie Playlist",
            metadata=[
                operations.GetPlaylistContentsMetadata(
                    rating_key="17",
                    key="/library/metadata/17",
                    guid="plex://movie/5d77683f6f4521001ea9dc53",
                    studio="Universal Pictures",
                    type="movie",
                    title="Serenity",
                    title_sort="Amazing Spider-Man 2",
                    library_section_title="Movies",
                    library_section_id=1,
                    library_section_key="/library/sections/1",
                    content_rating="PG-13",
                    summary="Serenity continues the story of the TV series it was based upon (\"Firefly\"). River Tam had a secret - one in which she's not even aware - so dangerous, no one's safe, as an Alliance operative's sent to capture her, and all others are considered irrelevant to his job.",
                    rating=8.2,
                    audience_rating=9.1,
                    year=2005,
                    tagline="They aim to misbehave.",
                    thumb="/library/metadata/17/thumb/1705637165",
                    art="/library/metadata/17/art/1705637165",
                    duration=141416,
                    originally_available_at=dateutil.parser.parse(
                        "2005-09-29T00:00:00Z"
                    ).date(),
                    added_at=1705637164,
                    updated_at=1705637165,
                    audience_rating_image="rottentomatoes://image.rating.upright",
                    has_premium_extras="1",
                    has_premium_primary_extra="1",
                    rating_image="rottentomatoes://image.rating.ripe",
                    media=[
                        operations.GetPlaylistContentsMedia(
                            id=15,
                            duration=141416,
                            bitrate=2273,
                            width=1920,
                            height=814,
                            aspect_ratio=2.35,
                            audio_channels=2,
                            audio_codec="aac",
                            video_codec="h264",
                            video_resolution="1080",
                            container="mp4",
                            video_frame_rate="24p",
                            optimized_for_streaming=0,
                            audio_profile="lc",
                            has64bit_offsets=False,
                            video_profile="high",
                            part=[
                                operations.GetPlaylistContentsPart(
                                    id=15,
                                    key="/library/parts/15/1705637151/file.mp4",
                                    duration=141416,
                                    file="/movies/Serenity (2005)/Serenity (2005).mp4",
                                    size=40271948,
                                    audio_profile="lc",
                                    container="mp4",
                                    has64bit_offsets=False,
                                    optimized_for_streaming=False,
                                    video_profile="high",
                                ),
                            ],
                        ),
                    ],
                    genre=[
                        operations.GetPlaylistContentsGenre(
                            tag="Action",
                        ),
                    ],
                    country=[
                        operations.GetPlaylistContentsCountry(
                            tag="United States of America",
                        ),
                    ],
                    director=[
                        operations.GetPlaylistContentsDirector(
                            tag="Joss Whedon",
                        ),
                    ],
                    writer=[
                        operations.GetPlaylistContentsWriter(
                            tag="Joss Whedon",
                        ),
                    ],
                    role=[
                        operations.GetPlaylistContentsRole(
                            tag="Gina Torres",
                        ),
                    ],
                ),
            ],
        ),
    )


def test_playlists_clear_playlist_contents():
    s = PlexAPI(
        access_token="<YOUR_API_KEY_HERE>",
    )

    assert s is not None

    res = s.playlists.clear_playlist_contents(playlist_id=1893.18)
    assert res.status_code == 200


def test_playlists_add_playlist_contents():
    s = PlexAPI(
        access_token="<YOUR_API_KEY_HERE>",
    )

    assert s is not None

    res = s.playlists.add_playlist_contents(
        playlist_id=8502.01,
        uri="server://12345/com.plexapp.plugins.library/library/metadata/1",
        play_queue_id=123,
    )
    assert res.status_code == 200
    assert res.object is not None
    assert res.object == operations.AddPlaylistContentsResponseBody(
        media_container=operations.AddPlaylistContentsMediaContainer(
            size=1,
            leaf_count_added=1,
            leaf_count_requested=1,
            metadata=[
                operations.AddPlaylistContentsMetadata(
                    rating_key="94",
                    key="/playlists/94/items",
                    guid="com.plexapp.agents.none://972e3047-83d6-4848-a000-261f0af26ba2",
                    type="playlist",
                    title="A great playlist",
                    summary="One of my great playlists",
                    smart=False,
                    playlist_type="video",
                    composite="/playlists/94/composite/1705800070",
                    duration=423000,
                    leaf_count=3,
                    added_at=1705716458,
                    updated_at=1705800070,
                ),
            ],
        ),
    )


def test_playlists_upload_playlist():
    s = PlexAPI(
        access_token="<YOUR_API_KEY_HERE>",
    )

    assert s is not None

    res = s.playlists.upload_playlist(
        path="/home/barkley/playlist.m3u",
        force=operations.QueryParamForce.ONE,
        section_id=1,
    )
    assert res.status_code == 200
