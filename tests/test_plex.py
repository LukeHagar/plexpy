"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

import dateutil.parser
from plex_api_client import PlexAPI
from plex_api_client.models import operations


def test_plex_get_companions_data():
    s = PlexAPI(
        access_token="<YOUR_API_KEY_HERE>",
    )

    assert s is not None

    res = s.plex.get_companions_data()
    assert res.status_code == 200
    assert res.response_bodies is not None
    assert res.response_bodies == [
        operations.ResponseBody(
            identifier="tv.plex.sonos",
            base_url="https://sonos.plex.tv",
            title="Sonos",
            link_url="https://sonos.plex.tv/link",
            provides="client,player",
            token="<value>",
        ),
    ]


def test_plex_get_user_friends():
    s = PlexAPI(
        access_token="<YOUR_API_KEY_HERE>",
    )

    assert s is not None

    res = s.plex.get_user_friends()
    assert res.status_code == 200
    assert res.friends is not None
    assert res.friends == [
        operations.Friend(
            email="username@email.com",
            friendly_name="exampleUser",
            home=True,
            id=0,
            restricted=False,
            shared_servers=[
                operations.SharedServers(),
            ],
            shared_sources=[
                operations.SharedSources(),
            ],
            status=operations.Status.ACCEPTED,
            thumb="https://plex.tv/users/7d1916e0d8f6e76b/avatar?c=1694481578",
            title="username123",
            username="username123",
            uuid="7d1916e0d8f6e76b",
        ),
    ]


def test_plex_get_geo_data():
    s = PlexAPI()

    assert s is not None

    res = s.plex.get_geo_data()
    assert res.status_code == 200
    assert res.geo_data is not None
    assert res.geo_data == operations.GetGeoDataGeoData(
        code="VI",
        continent_code="NA",
        country="United States Virgin Islands",
        city="Amsterdam",
        european_union_member=True,
        time_zone="America/St_Thomas",
        postal_code="802",
        in_privacy_restricted_country=True,
        in_privacy_restricted_region=True,
        subdivisions="Saint Thomas",
        coordinates="18.3381, -64.8941",
    )


def test_plex_get_home_data():
    s = PlexAPI(
        access_token="<YOUR_API_KEY_HERE>",
    )

    assert s is not None

    res = s.plex.get_home_data()
    assert res.status_code == 200
    assert res.object is not None
    assert res.object == operations.GetHomeDataResponseBody(
        id=1841489,
        name="Blindkitty38's home",
        guest_user_id=58815432,
        guest_user_uuid="f3df4e01bfca0787",
    )


def test_plex_get_server_resources():
    s = PlexAPI(
        access_token="<YOUR_API_KEY_HERE>",
    )

    assert s is not None

    res = s.plex.get_server_resources(
        include_https=operations.IncludeHTTPS.ENABLE,
        include_relay=operations.IncludeRelay.ENABLE,
        include_i_pv6=operations.IncludeIPv6.ENABLE,
        client_id="gcgzw5rz2xovp84b4vha3a40",
    )
    assert res.status_code == 200
    assert res.plex_devices is not None
    assert res.plex_devices == [
        operations.PlexDevice(
            name="<value>",
            product="Recycled Plastic Mouse",
            product_version="<value>",
            platform="<value>",
            platform_version="<value>",
            device="Desktop",
            client_identifier="<value>",
            created_at=dateutil.parser.isoparse("2019-06-24T11:38:02Z"),
            last_seen_at=dateutil.parser.isoparse("2019-06-24T11:38:02Z"),
            provides="<value>",
            owner_id=645894,
            source_title="<value>",
            public_address="<value>",
            access_token="<value>",
            owned=False,
            home=False,
            synced=False,
            relay=False,
            presence=False,
            https_required=False,
            public_address_matches=False,
            dns_rebinding_protection=False,
            nat_loopback_supported=False,
            connections=[
                operations.Connections(
                    protocol=operations.Protocol.HTTP,
                    address="9937 Mante Via",
                    port=4655,
                    uri="https://ajar-sonnet.net/",
                    local=False,
                    relay=False,
                    i_pv6=False,
                ),
            ],
        ),
    ]


def test_plex_get_pin_():
    s = PlexAPI()

    assert s is not None

    res = s.plex.get_pin(request={})
    assert res.status_code == 201
    assert res.auth_pin_container is not None
    assert res.auth_pin_container == operations.GetPinAuthPinContainer(
        id=308667304,
        code="7RQZ",
        product="0",
        trusted=False,
        qr="https://plex.tv/api/v2/pins/qr/7RQZ",
        client_identifier="string",
        location=operations.GeoData(
            code="VI",
            continent_code="NA",
            country="United States Virgin Islands",
            city="Amsterdam",
            european_union_member=True,
            time_zone="America/St_Thomas",
            postal_code="802",
            in_privacy_restricted_country=True,
            in_privacy_restricted_region=True,
            subdivisions="Saint Thomas",
            coordinates="18.3381, -64.8941",
        ),
        expires_in=876,
        created_at=dateutil.parser.isoparse("2024-07-16T17:03:05Z"),
        expires_at=dateutil.parser.isoparse("2024-07-16T17:18:05Z"),
        auth_token=None,
        new_registration=None,
    )


def test_plex_get_token_by_pin_id_():
    s = PlexAPI()

    assert s is not None

    res = s.plex.get_token_by_pin_id(
        request={
            "pin_id": 408895,
        }
    )
    assert res.status_code == 200
